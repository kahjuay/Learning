Option Explicit
Global intGoodFile As Integer
Global strMacroFileName As String
Global strPTFileName As String
Global strPTFile1 As String
Global strPTFile2 As String
Global strFund1 As String
Global strFund2 As String
Global strJaciFileName As String
Global strProcessedSheets As String
Global strComboWBName As String
Global strComboWSName As String
Global strUserName As String
Const intLastRowConst = 30000
Const intLastColConst = 1000
Const intMiddleCol = 9
Const intThirdCol = 18

Sub Main()

    strUserName = Right(Application.UserName, Len(Application.UserName) - InStr(Application.UserName, ", ") - 1)
    strProcessedSheets = "Hello " & strUserName & ", the processed sheets are in BLUE and include:"
    
    Call SwitchWB("PortTarget")
    RemoveUnusedWorksheet
    
    If intGoodFile = 1 Then
        Exit Sub
    End If

    ProcessJaci
    ProcessDetailReport
    ProcessDBRiskMIndexExp
    ProcessDBCTDOVSecIndexExp
    ProcessDBCTDOVIndexExp
    ProcessDBCTDIndexExp
    ProcessSectorReport
    ProcessHYvsIG
    ProcessCtyRatings
    ProcessDBCTDOVYTWIndexExp
    MsgBox strProcessedSheets
End Sub


Sub Main2()
Dim intLastRow As Integer
Dim intLastCol As Integer

    strUserName = Right(Application.UserName, Len(Application.UserName) - InStr(Application.UserName, ", ") - 1)
    SwitchWBMultiple
    If intGoodFile = 1 Then
        Exit Sub
    End If
    
    MakeComboWB
    MakeSummaryBlock
    MakeDBCTDOVYTWIndexExpCountryBlock
    MakeCtyRatingsBlock
    MakeDBCTDOVYTWIndexExpCTSDBlock
    MakeDBCTDIndexExpSummary
    MakeSectorReportSummary
    MakeHYvsIGSummary
    
    
    
    
    'Finishing touches
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    Columns("A:Z").EntireColumn.AutoFit
    intLastRow = FindLastRow(1, intLastRowConst)
    Cells(intLastRow + 5, 1).Value = "Report generated by " & strUserName & " on " & Now
    Range("A1").Select
    intLastCol = FindLastColReversed(intLastColConst, 1)
    
    Call SetPrintOut(intLastRow + 5, intLastCol)
    
    MsgBox "Hi " & strUserName & ", the combined summaries are ready now."
End Sub


Sub SetPrintOut(intLastRow As Integer, intLastCol As Integer)
Dim strPrintArea As String

    
    strPrintArea = "A1:" & colLtr(intLastCol) & intLastRow
    Application.PrintCommunication = True
    ActiveSheet.PageSetup.PrintArea = strPrintArea
    
    With ActiveSheet.PageSetup
        .Orientation = xlLandscape
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = 1
    End With
    
    ActiveSheet.PrintPreview
    
End Sub


Sub MakeComboWB()
    Workbooks.Add
    strComboWBName = ActiveWorkbook.Name
    ActiveSheet.Select
    ActiveSheet.Name = "Combination"
    Range("A1").Select
End Sub


Sub MakeDBCTDOVYTWIndexExpCountryBlock()
Dim intFirstRow As Integer
Dim intTempCountryCol As Integer
Dim intTempCountryRow As Integer
Dim intCountryRowStart As Integer
Dim intCountryRowEnd As Integer
Dim intTempCountryRowEnd As Integer
Dim intCounter As Integer
Dim strCountry As String
Dim strWSName As String


    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    intFirstRow = FindLastRow(1, intLastRowConst) + 15 '90
    intTempCountryCol = 50
    
    strWSName = "DurbuckCTDOVYTW_Index Exposure"
    
    'Copy country data from PT file 1 from CTSD Check block
    intCountryRowStart = intFirstRow + 1
    Call CopyWBColumn(strPTFile1, strWSName, "CTSD Check", -10, intFirstRow, 1, 0, 0, 6)
    intCountryRowEnd = FindLastRow(1, intLastRowConst)
    
    'Copy MV% data from PT file 1 from CTSD Check block
    Call CopyWBColumn(strPTFile1, strWSName, "CTSD Check", -2, intFirstRow, 2, 0, 0, 6)
    
    'Copy CTSD data from PT file 1 from CTSD Check block
    Call CopyWBColumn(strPTFile1, strWSName, "CTSD Check", -3, intFirstRow, 4, 0, 0, 6)
    
    'Copy YTW data from PT file 1 from CTSD Check block
    Call CopyWBColumn(strPTFile1, strWSName, "CTSD Check", -1, intFirstRow, 6, 0, 0, 6)
    
    'Copy country data from PT file 2 from CTSD Check block
    Call CopyWBColumn(strPTFile2, strWSName, "CTSD Check", -10, intFirstRow, intTempCountryCol, 0, 0, 6)
    
    intTempCountryRowEnd = FindLastRow(intTempCountryCol, intLastRowConst)
    
    'Copy MV% data from PT file 2 from CTSD Check block
    Call CopyWBColumn(strPTFile2, strWSName, "CTSD Check", -2, intFirstRow, intTempCountryCol + 1, 0, 0, 6)
    
    'Copy CTSD data from PT file 2 from CTSD Check block
    Call CopyWBColumn(strPTFile2, strWSName, "CTSD Check", -3, intFirstRow, intTempCountryCol + 2, 0, 0, 6)
    
    'Copy YTW data from PT file 2 from CTSD Check block
    Call CopyWBColumn(strPTFile2, strWSName, "CTSD Check", -1, intFirstRow, intTempCountryCol + 3, 0, 0, 6)
    
    'Correct country misalignment for fund 2
    For intCounter = intCountryRowStart To intTempCountryRowEnd
        'Locate row aligning with main country row in Column 1
        intTempCountryRow = AlignCountryRow(Cells(intCounter, intTempCountryCol).Value, "A" & intCountryRowStart, "A" & intCountryRowEnd)
        
        'Aligned MV%
        Cells(intTempCountryRow, 3).Value = Cells(intCounter, intTempCountryCol + 1).Value
        
        'Aligned CTSD
        Cells(intTempCountryRow, 5).Value = Cells(intCounter, intTempCountryCol + 2).Value
        
        'Aligned YTW
        Cells(intTempCountryRow, 7).Value = Cells(intCounter, intTempCountryCol + 3).Value
    Next intCounter

    'Remove temp CTSD columns
    Range(colLtr(intTempCountryCol) & intFirstRow & ":" & colLtr(intTempCountryCol + 3) & intTempCountryRowEnd).Select
    Application.CutCopyMode = False
    Selection.ClearContents
    
    

    'Create column identifier headers
    Cells(intFirstRow, 1).Value = "Active by Country"
    Cells(intFirstRow, 2).Value = strFund1 & " MV%"
    Cells(intFirstRow, 3).Value = strFund2 & " MV%"
    Cells(intFirstRow, 4).Value = strFund1 & " CTSD"
    Cells(intFirstRow, 5).Value = strFund2 & " CTSD"
    Cells(intFirstRow, 6).Value = strFund1 & " YTW"
    Cells(intFirstRow, 7).Value = strFund2 & " YTW"
    
End Sub

Sub MakeDBCTDOVYTWIndexExpCTSDBlock()
Dim intFirstRow As Integer
Dim strWSName As String

    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    
    intFirstRow = FindLastRow(intMiddleCol, intLastRowConst)
    
    strWSName = "DurbuckCTDOVYTW_Index Exposure"
    
    'Copy CTSD block data from PT file 1 from CTSD Check block
    Call CopyWBColumn(strPTFile1, strWSName, "CTSD Check", -10, intFirstRow, intMiddleCol, 7, 1, 0)
    
    'Copy CTSD block data from PT file 2 from CTSD Check block
    Call CopyWBColumn(strPTFile2, strWSName, "CTSD Check", -10, intFirstRow + 2, intMiddleCol, 7, 1, 1)
    
    'Copy CTSD 5y, 10y, 30y duration bucket data from PT file 1 from CTSD Check
    Call CopyWBColumn(strPTFile1, strWSName, "CTSD Check", -10, intFirstRow + 4, intMiddleCol, 7, 1, 3)
    
    'Copy CTSD 5y, 10y, 30y duration bucket data from PT file 2 from CTSD Check
    Call CopyWBColumn(strPTFile2, strWSName, "CTSD Check", -10, intFirstRow + 6, intMiddleCol, 7, 1, 4)
    
    'Label columns
    Cells(intFirstRow + 1, intMiddleCol).Value = strFund1
    Cells(intFirstRow + 2, intMiddleCol).Value = strFund2
    Cells(intFirstRow + 5, intMiddleCol).Value = strFund1
    Cells(intFirstRow + 6, intMiddleCol).Value = strFund2
    
End Sub


Function AlignCountryRow(strSearchString As String, strLocStart As String, strLocEnd As String) As Integer
Dim intLastRow As Integer
On Error GoTo errHandler
    Range(strLocStart & ":" & strLocEnd).Select
    Selection.Find(What:=strSearchString, After:=ActiveCell, LookIn:=xlFormulas, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Activate
    Selection.FindNext(After:=ActiveCell).Activate

    AlignCountryRow = ActiveCell.Row
    
errHandler:
    If Err.Number = 91 Then
    'Can't find country in main country row, add to it
        intLastRow = FindLastRow(1, intLastRowConst)
        Cells(intLastRow + 1, 1).Value = strSearchString
        AlignCountryRow = intLastRow + 1
    End If
End Function


Sub MakeDBCTDIndexExpSummary()
Dim intFirstRow As Integer
Dim strWSName As String

    strWSName = "DurbuckCTD_Index Exposure"

    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    intFirstRow = FindLastRow(intMiddleCol, intLastRowConst) + 3 '90
    
    'Copy header and data from PT file 1 from CTD <3y block
    Call CopyWBColumn(strPTFile1, strWSName, "<3y", -1, intFirstRow, intMiddleCol, 7, 1)
    
    'Copy data from PT file 2 from CTD <3y block
    Call CopyWBColumn(strPTFile2, strWSName, "<3y", -1, intFirstRow + 2, intMiddleCol, 7, 1, 1)
    
    
    'Copy header and data from PT file 1 from CTD 30y block
    Call CopyWBColumn(strPTFile1, strWSName, "30y", -5, intFirstRow + 4, intMiddleCol + 1, 6, 1)
    
    'Copy data from PT file 2 from CTD 30y block
    Call CopyWBColumn(strPTFile2, strWSName, "30y", -5, intFirstRow + 6, intMiddleCol + 1, 6, 1, 1)
    
    'Copy header and data from PT file 1 from Rates block
    Call CopyWBColumn(strPTFile1, strWSName, "30y", -6, intFirstRow + 8, intMiddleCol, 7, 1, 3)
    
    'Copy header and data from PT file 2 from Rates block
    Call CopyWBColumn(strPTFile2, strWSName, "30y", -6, intFirstRow + 10, intMiddleCol, 7, 1, 4)
    
    'Create fund code in column identifier
    Cells(intFirstRow + 1, intMiddleCol).Value = strFund1
    Cells(intFirstRow + 2, intMiddleCol).Value = strFund2
    Cells(intFirstRow + 5, intMiddleCol).Value = strFund1
    Cells(intFirstRow + 6, intMiddleCol).Value = strFund2
    Cells(intFirstRow + 9, intMiddleCol).Value = strFund1
    Cells(intFirstRow + 10, intMiddleCol).Value = strFund2
End Sub

Sub MakeHYvsIGSummary()
Dim intFirstRow As Integer
Dim strData As String
Dim arrData As Variant
Dim intCounter As Integer
Dim strWSName As String

    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    intFirstRow = FindLastRow(intMiddleCol, intLastRowConst) + 6
    strWSName = "HYvsIG_Report"
    
    'Copy the first 2 columns from PT file 1
    Call CopyWBColumn(strPTFile1, strWSName, "Adjustment from", -12, intFirstRow, intMiddleCol, 1, 17)
    
    'Copy Fund 1 %MKV
    Call CopyWBColumn(strPTFile1, strWSName, "Adjustment from", -8, intFirstRow + 2, intMiddleCol + 2, 0, 15, 2)
    
    'Copy Fund 2 %MKV
    Call CopyWBColumn(strPTFile2, strWSName, "Adjustment from", -8, intFirstRow + 2, intMiddleCol + 3, 0, 15, 2)
    
    'Copy Fund 1 CTD
    Call CopyWBColumn(strPTFile1, strWSName, "Adjustment from", -5, intFirstRow + 2, intMiddleCol + 4, 0, 15, 2)
    
    'Copy Fund 2 CTD
    Call CopyWBColumn(strPTFile2, strWSName, "Adjustment from", -5, intFirstRow + 2, intMiddleCol + 5, 0, 15, 2)
    
    'Copy Fund 1 CTSD
    Call CopyWBColumn(strPTFile1, strWSName, "Adjustment from", -2, intFirstRow + 2, intMiddleCol + 6, 0, 15, 2)
    
    'Copy Fund 2 CTD
    Call CopyWBColumn(strPTFile2, strWSName, "Adjustment from", -2, intFirstRow + 2, intMiddleCol + 7, 0, 15, 2)
    
    
    'Create headers on first row
    Cells(intFirstRow, intMiddleCol).Value = "Active"
    Cells(intFirstRow, intMiddleCol + 2).Value = strFund1 & " %MKV"
    Cells(intFirstRow, intMiddleCol + 3).Value = strFund2 & " %MKV"
    Cells(intFirstRow, intMiddleCol + 4).Value = strFund1 & " CTD"
    Cells(intFirstRow, intMiddleCol + 5).Value = strFund2 & " CTD"
    Cells(intFirstRow, intMiddleCol + 6).Value = strFund1 & " CTSD"
    Cells(intFirstRow, intMiddleCol + 7).Value = strFund2 & " CTSD"
    
    
    'CTD correlated buckets block
    intFirstRow = FindLastRow(intThirdCol, intLastRowConst)
    
    'Copy the first 2 columns from PT file 1
    Call CopyWBColumn(strPTFile1, strWSName, "CTD correlated buckets", 0, intFirstRow, intThirdCol)
    
    'Copy Fund 1 CTD
    Call CopyWBColumn(strPTFile1, strWSName, "CTD correlated buckets", 4, intFirstRow, intThirdCol + 1)
    
    'Copy Fund 2 CTD
    Call CopyWBColumn(strPTFile2, strWSName, "CTD correlated buckets", 4, intFirstRow, intThirdCol + 2)
    
    'Create headers on first row
    Cells(intFirstRow, intThirdCol + 1).Value = strFund1 & " CTD"
    Cells(intFirstRow, intThirdCol + 2).Value = strFund2 & " CTD"
    
    
End Sub

Sub MakeCtyRatingsBlock()
Dim intStartRow As Integer
Dim intStartCol As Integer
Dim intLastRow As Integer
Dim intFirstRow As Integer
Dim strWSName As String


    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    intFirstRow = FindLastRow(1, intLastRowConst) + 5
    
    strWSName = "CtyRatings_Report"

    'Goto CtyRatings, Copy 1st Column only
    Call CopyWBColumn(strPTFile1, strWSName, "HY active", 0, intFirstRow, 1)
    'Label Fund 1 %MKV
    Cells(intFirstRow - 1, 2).Value = strFund1
    Call CopyWBColumn(strPTFile1, strWSName, "HY active", 1, intFirstRow, 2)
    
    'Label Fund 2 %MKV
    Cells(intFirstRow - 1, 3).Value = strFund2
    Call CopyWBColumn(strPTFile2, strWSName, "HY active", 1, intFirstRow, 3)
    
    'Label Fund 1 YTW
    Cells(intFirstRow - 1, 4).Value = strFund1
    Call CopyWBColumn(strPTFile1, strWSName, "HY active", 2, intFirstRow, 4)
    
    'Label Fund 2 YTW
    Cells(intFirstRow - 1, 5).Value = strFund2
    Call CopyWBColumn(strPTFile2, strWSName, "HY active", 2, intFirstRow, 5)
    
    'Label Fund 1 CTSD Override
    Cells(intFirstRow - 1, 6).Value = strFund1
    Call CopyWBColumn(strPTFile1, strWSName, "HY active", 3, intFirstRow, 6)
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    
    'Label Fund 2 CTSD Override
    Cells(intFirstRow - 1, 7).Value = strFund2
    Call CopyWBColumn(strPTFile2, strWSName, "HY active", 3, intFirstRow, 7)
End Sub


Sub MakeSectorReportSummary()
Dim intFirstRow As Integer
Dim strData As String
Dim arrData As Variant
Dim intCounter As Integer
Dim strWSName As String

    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    intFirstRow = FindLastRow(intMiddleCol, intLastRowConst) + 4
    
    strWSName = "Sector_Report"
    
    Cells(intFirstRow, intMiddleCol).Value = "Active Sectors"
    'Goto first PT file, extract all sectors
    strData = CollectSubTotal(strPTFile1, strWSName, "Subtotal", 0, 1)
    arrData = Split(strData, ",")
    
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    'Generate Sector Column
    For intCounter = 1 To UBound(arrData)
        Cells(intFirstRow + intCounter, intMiddleCol).Value = arrData(intCounter)
    Next intCounter
    
    'Goto first PT file, extract MV%
    Cells(intFirstRow, intMiddleCol + 1).Value = strFund1 & " MV%"
    strData = CollectSubTotal(strPTFile1, strWSName, "Subtotal", 4, 1)
    arrData = Split(strData, ",")
    
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    'Generate Sector Column
    For intCounter = 1 To UBound(arrData)
        Cells(intFirstRow + intCounter, intMiddleCol + 1).Value = arrData(intCounter)
    Next intCounter
    
    
    'Goto second PT file, extract MV%
    Cells(intFirstRow, intMiddleCol + 2).Value = strFund2 & " MV%"
    strData = CollectSubTotal(strPTFile2, strWSName, "Subtotal", 4, 1)
    arrData = Split(strData, ",")
    
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    
    For intCounter = 1 To UBound(arrData)
        Cells(intFirstRow + intCounter, intMiddleCol + 2).Value = arrData(intCounter)
    Next intCounter
    
    
    'Goto first PT file, extract CTSD
    Cells(intFirstRow, intMiddleCol + 3).Value = strFund1 & " CTSD"
    strData = CollectSubTotal(strPTFile1, strWSName, "Subtotal", 16, 1)
    arrData = Split(strData, ",")
    
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    
    For intCounter = 1 To UBound(arrData)
        Cells(intFirstRow + intCounter, intMiddleCol + 3).Value = arrData(intCounter)
    Next intCounter
    
    
    'Goto second PT file, extract CTSD
    Cells(intFirstRow, intMiddleCol + 4).Value = strFund2 & " CTSD"
    strData = CollectSubTotal(strPTFile2, strWSName, "Subtotal", 16, 1)
    arrData = Split(strData, ",")
    
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    
    For intCounter = 1 To UBound(arrData)
        Cells(intFirstRow + intCounter, intMiddleCol + 4).Value = arrData(intCounter)
    Next intCounter
    
    
    'Goto first PT file, extract YTW
    Cells(intFirstRow, intMiddleCol + 5).Value = strFund1 & " YTW"
    strData = CollectSubTotal(strPTFile1, strWSName, "Subtotal", 7, 1)
    arrData = Split(strData, ",")
    
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    
    For intCounter = 1 To UBound(arrData)
        Cells(intFirstRow + intCounter, intMiddleCol + 5).Value = arrData(intCounter)
    Next intCounter
    
    
    'Goto second PT file, extract YTW
    Cells(intFirstRow, intMiddleCol + 6).Value = strFund2 & " YTW"
    strData = CollectSubTotal(strPTFile2, strWSName, "Subtotal", 7, 1)
    arrData = Split(strData, ",")
    
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    
    For intCounter = 1 To UBound(arrData)
        Cells(intFirstRow + intCounter, intMiddleCol + 6).Value = arrData(intCounter)
    Next intCounter
    
    
    
End Sub


Function CollectSubTotal(strPTFile As String, strWSName As String, strKey As String, intOffset As Integer, intSourceCol As Integer) As String
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim strData As String
Dim intCounter As Integer

    Workbooks(strPTFile).Worksheets(strWSName).Activate

    intLastRow = FindLastRow(intSourceCol, intLastRowConst)
    strData = ""

    For intCounter = 1 To intLastRow
        If InStr(1, Cells(intCounter, intSourceCol).Value, strKey) > 0 Then
            If intOffset = 0 Then
                strData = strData & "," & Left(Cells(intCounter, intSourceCol + intOffset).Value, Len(Cells(intCounter, intSourceCol).Value) - 9)
            Else
                strData = strData & "," & Cells(intCounter, intSourceCol + intOffset).Value
            End If
        End If
    Next intCounter
    
    CollectSubTotal = strData
    
    
End Function


Sub CopyWBColumn(strPTFile As String, strWSName As String, strKey As String, intOffset As Integer, intTargetRow As Integer, intTargetCol As Integer, Optional intColSizeAdd As Integer = 0, Optional intRowAdd As Integer = 0, Optional intFirstRowAdjust As Integer = 0)

Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intFirstCol As Integer

Workbooks(strPTFile).Worksheets(strWSName).Activate

intFirstRow = FindCountryRow(strKey) + intFirstRowAdjust
intFirstCol = ActiveCell.Column

If intRowAdd = 0 Then
    intLastRow = FindLastRow(intFirstCol, intLastRowConst)
Else
    intLastRow = intFirstRow + intRowAdd
End If

Range(colLtr(intFirstCol + intOffset) & intFirstRow & ":" & colLtr(intFirstCol + intOffset + intColSizeAdd) & intLastRow).Select
Selection.Copy

Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
Cells(intTargetRow, intTargetCol).Select
Selection.PasteSpecial Paste:=xlPasteAllUsingSourceTheme, Operation:=xlNone _
        , SkipBlanks:=False, Transpose:=False
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

End Sub



Sub MakeSummaryBlock()
Dim intStartRow As Integer
Dim intStartCol As Integer
Dim intLastRow As Integer



    strComboWSName = "Combination"
    'Create the Summary Block
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    intStartRow = FindFirstRowReversed(intLastColConst)
    intStartCol = FindLastColReversed(intLastColConst, intLastRowConst)
    Cells(intStartRow, intStartCol).Select
    intLastRow = intStartRow
    'Header
    Cells(intLastRow, 1).Value = "Broad Summary"
    Cells(intLastRow, 2).Value = strFund1
    Cells(intLastRow, 3).Value = strFund2
    
    'MV
    Cells(intLastRow + 1, 1).Value = "Cash + Treasuries"
    
    'MV%
    Cells(intLastRow + 2, 1).Value = "Cash + Treasuries MV%"
    
    'Active CTSD
    Cells(intLastRow + 3, 1).Value = "Active CTSD"
    
    'Active YTW
    Cells(intLastRow + 4, 1).Value = "Active YTW"
    
    'Active OAS
    Cells(intLastRow + 5, 1).Value = "Active OAS"
    
    'Active DTS
    Cells(intLastRow + 6, 1).Value = "Active DTS"
    
    'Active CTD
    Cells(intLastRow + 7, 1).Value = "Active CTD"
    
    'Active CTD (adj)
    Cells(intLastRow + 8, 1).Value = "Active CTD (adj)"
    
    'Fund 1 population
    Call PopulateFundSummary(strPTFile1, intLastRow, 2)
    Call PopulateFundSummary(strPTFile2, intLastRow, 3)
    
End Sub

Sub PopulateFundSummary(strPTFile As String, intLastRow As Integer, intFundCol As Integer)
Dim varDataArray As Variant

    varDataArray = SumCash(strPTFile, intFundCol)
  
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    'Cash + Treasuries
    Cells(intLastRow + 1, intFundCol).Value = varDataArray(0)
    Rows(intLastRow + 1 & ":" & intLastRow + 1).Select
    Selection.Style = "Currency"
        
    'Cash + Treasuries MV%
    Cells(intLastRow + 2, intFundCol).Value = varDataArray(1)

    'Recycling varDataArray for collecting the other data points
    varDataArray = GetActiveNumbers(strPTFile)
    Workbooks(strComboWBName).Worksheets(strComboWSName).Activate
    'Active CTSD
    Cells(intLastRow + 3, intFundCol).Value = varDataArray(0)
    
    'Active YTW
    Cells(intLastRow + 4, intFundCol).Value = varDataArray(1)
    
    'Active OAS
    Cells(intLastRow + 5, intFundCol).Value = varDataArray(2)
    
    'Active DTS
    Cells(intLastRow + 6, intFundCol).Value = varDataArray(3)
    
    'Active CTD
    Cells(intLastRow + 7, intFundCol).Value = varDataArray(4)
    
    'Active CTD (adj)
    Cells(intLastRow + 8, intFundCol).Value = varDataArray(5)
    
End Sub

Function GetActiveNumbers(strPTFile As String) As Variant
Dim intLastRow As Integer
Dim strArrayData As String

Workbooks(strPTFile).Worksheets("Detail_Report").Activate
intLastRow = FindCountryRow("Report Generated by") - 3

'Active CTSD
strArrayData = Cells(intLastRow, 36).Value
'Active YTW
strArrayData = strArrayData & "," & Cells(intLastRow, 27).Value
'Active OAS
strArrayData = strArrayData & "," & Cells(intLastRow, 30).Value
'Active DTS
strArrayData = strArrayData & "," & Cells(intLastRow, 33).Value
'Active CTD
strArrayData = strArrayData & "," & Cells(intLastRow, 21).Value

Workbooks(strPTFile).Worksheets("HYvsIG_Report").Activate

intLastRow = FindCountryRow("Total (adjusted)")

'Active CTD (adj)
strArrayData = strArrayData & "," & Cells(intLastRow, 5).Value

GetActiveNumbers = Split(strArrayData, ",")
End Function


Function SumCash(strPTFile As String, intCol As Integer) As Variant
Dim dblCashTotal As Double
Dim dblCashMVTotal As Double
Dim intLastRow As Integer
Dim intRowCounter As Integer
Dim varCash As Variant


Workbooks(strPTFile).Worksheets("Detail_Report").Activate
intLastRow = FindLastRow(intCol, intLastRowConst)

dblCashTotal = 0
dblCashMVTotal = 0

For intRowCounter = 1 To intLastRow
    If ((InStr(1, Cells(intRowCounter, 3).Value, "CASH") > 0) Or (InStr(1, Cells(intRowCounter, 3).Value, "TREASURY BILL") > 0) Or (InStr(1, Cells(intRowCounter, 3).Value, "US TREASURY") > 0)) Then
        'If Cash is found then add to bucket
        dblCashTotal = dblCashTotal + Cells(intRowCounter, 24).Value
        dblCashMVTotal = dblCashMVTotal + Cells(intRowCounter, 18).Value
    End If
Next intRowCounter

varCash = Array(dblCashTotal, dblCashMVTotal)

SumCash = varCash
End Function


Function VerifyColumns(strWkSheet As String) As Integer
Dim intRecordRow As Integer
Dim intRecordCol As Integer
Dim intStartRow As Integer
Dim intStartCol As Integer
Dim intEndCol As Integer
Dim varSheetVerify As Variant
Dim varSheetTarget As Variant
Dim strVerifyRange As String
Dim strRangeToCheck As String
Dim iRow As Integer
Dim iCol As Integer

    Workbooks(strMacroFileName).Worksheets("Verification").Activate
    
    'Find Verification Record
    Cells.Find(What:=strWkSheet, After:=ActiveCell, LookIn:=xlFormulas, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Activate
    
    intRecordRow = ActiveCell.Row
    'MsgBox intRecordRow
    
    ActiveCell.Offset(0, 1).Select
    intStartRow = ActiveCell.Value
    ActiveCell.Offset(0, 1).Select
    intStartCol = ActiveCell.Value
    ActiveCell.Offset(0, 1).Select
    intEndCol = ActiveCell.Value
    ActiveCell.Offset(0, 1).Select
    intRecordCol = ActiveCell.Column
    
    strVerifyRange = Cells(intRecordRow, intRecordCol).Address & ":" & Cells(intRecordRow, intRecordCol + intEndCol).Address
    strRangeToCheck = Cells(intStartRow, intStartCol).Address & ":" & Cells(intStartRow, intEndCol).Address
    'MsgBox strRangeToCheck
    
    
    varSheetVerify = ActiveSheet.Range(strVerifyRange)
    
    Workbooks(strPTFileName).Worksheets(strWkSheet).Activate
    
    varSheetTarget = ActiveSheet.Range(strRangeToCheck)
    
    VerifyColumns = 0
    
    For iRow = LBound(varSheetVerify, 1) To UBound(varSheetVerify, 1)
        'For iCol = LBound(varSheetVerify, 2) To UBound(varSheetVerify, 2)
        For iCol = 1 To intEndCol - intStartCol + 1
            If varSheetVerify(iRow, iCol) = varSheetTarget(iRow, iCol) Then
                ' Cells are identical.
                ' Do nothing.
                VerifyColumns = VerifyColumns + 0
            Else
                'Some discrepancy detected with the PT file vs verify page
                VerifyColumns = VerifyColumns + 1
            End If
        Next
    Next
    
'    If VerifyColumns > 0 Then
'        MsgBox "There are discrepancies found within the column headers of " & strWkSheet
'    End If
    
End Function

Sub ProcessHYvsIG()
Dim strWSName As String
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intBlockStartRow As Integer
Dim intBlockEndRow As Integer
Dim strSource As String
Dim strTarget As String
Dim intLastCol As Integer
Dim intExpCol As Integer
Dim i As Integer
Dim j As Integer
Dim strTotal As String
Dim arrTotal As Variant
Dim intUSTMVRow As Integer
Dim intUSTCount As Integer
Dim dblUSTWeight As Double
Dim dblUSTCTD As Double
Dim strSecName As String

    strWSName = "HYvsIG_Report"
    
    If VerifyColumns(strWSName) > 0 Then
        MsgBox "Hi " & strUserName & ", I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If
    
    Worksheets(strWSName).Activate
    
    intLastRow = FindLastRow(12, intLastRowConst)
    
    intFirstRow = intLastRow + 3
    
    
    'Check whether processing was previously done
    If Cells(intFirstRow + 4, 3).Value <> "" Then
        MsgBox "Hi " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    intBlockStartRow = FindFirstRow(3)
    intBlockEndRow = FindLastRow(3, intLastRowConst)
    
    
    'Copy %MKV and CTD Block
    Cells(intFirstRow, 1).Select
    
    strSource = "A" & intBlockStartRow & ":H" & intBlockEndRow
    strTarget = "A" & intFirstRow
    
    Call CopyBlock(strSource, strTarget, "N")
    
    'Cells(intFirstRow, 1).Value = "Computed"
    intLastCol = FindLastCol(1, intFirstRow + 1)
    
    'Copy CTSD Override Block
    strSource = "U" & intBlockStartRow & ":W" & intBlockEndRow
    strTarget = colLtr(intLastCol + 1) & intFirstRow
    
    Call CopyBlock(strSource, strTarget, "N")
    
    intLastRow = FindLastRow(1, intLastRowConst)
    intLastCol = FindLastCol(1, intFirstRow + 1)
    
    'Moving NR breakdown weight for Corporate HY to IG
    
    For i = intFirstRow To intLastRow '44 to 61
        If Cells(i, 1).Value = "CORPORATE" Then '49
            'Add CTD Summation of Treasuries to CTD NR IG
            Cells(i - 2, 7).FormulaR1C1 = "=" & Cells(i - 2, 7).Value & "+R[18]C[3]"
            
            'Reduce CTD Summation of Treasuries from CTD Sov IG
            Cells(i + 10, 7).FormulaR1C1 = "=" & Cells(i + 10, 7).Value & "-R[6]C[3]"
            
            
            'Add UST MV weight to Unrated IG
            Cells(i - 2, 4).FormulaR1C1 = "=" & Cells(i - 2, 4).Value & "+R[3]C[10]"
            
            'Remove UST MV weight from Sov IG
            Cells(i + 10, 4).FormulaR1C1 = "=" & Cells(i + 10, 4).Value & "-R[-9]C[10]"
    
            
            'HY adjustments
            'Index
            Cells(i + 1, 3).FormulaR1C1 = "=" & Cells(i + 1, 3).Value & "-R[-2]C[15]"
            Cells(i + 1, 6).FormulaR1C1 = "=" & Cells(i + 1, 6).Value & "-R[-2]C[14]"
            Cells(i + 1, 9).FormulaR1C1 = "=" & Cells(i + 1, 9).Value & "-R[-2]C[11]"
            'Fund
            Cells(i + 1, 4).FormulaR1C1 = "=" & Cells(i + 1, 4).Value & "-R[3]C[16]"
            Cells(i + 1, 7).FormulaR1C1 = "=" & Cells(i + 1, 7).Value & "-R[3]C[12]"
            Cells(i + 1, 10).FormulaR1C1 = "=" & Cells(i + 1, 10).Value & "-R[3]C[9]"
            
            
            'IG adjustments
            'Index
            Cells(i + 2, 3).FormulaR1C1 = "=" & Cells(i + 2, 3).Value & "+R[-3]C[15]"
            Cells(i + 2, 6).FormulaR1C1 = "=" & Cells(i + 2, 6).Value & "+R[-3]C[14]"
            Cells(i + 2, 9).FormulaR1C1 = "=" & Cells(i + 2, 9).Value & "+R[-3]C[11]"
            'Fund
            Cells(i + 2, 4).FormulaR1C1 = "=" & Cells(i + 2, 4).Value & "+R[2]C[16]"
            Cells(i + 2, 7).FormulaR1C1 = "=" & Cells(i + 2, 7).Value & "+R[2]C[12]"
            Cells(i + 2, 10).FormulaR1C1 = "=" & Cells(i + 2, 10).Value & "+R[2]C[9]"
        End If
    Next i
    

    'Update Exposure Calculation Formula
    intExpCol = 5
    For i = 1 To 3
        For j = intFirstRow + 2 To intLastRow
            Cells(j, intExpCol).FormulaR1C1 = "=RC[-1]-RC[-2]"
        Next j
        intExpCol = intExpCol + 3
    Next i
    
    'Update Subtotal Summation Formula
    For i = intFirstRow To intLastRow
        If Right(Cells(i, 1).Value, 8) = "Subtotal" Then
            strTotal = strTotal & i & ","
            For j = 3 To intLastCol
                Cells(i, j).FormulaR1C1 = "=R[-2]C+R[-1]C"
            Next j
        End If
    Next i
    
    strTotal = Left(strTotal, Len(strTotal) - 1)
    
    arrTotal = Split(strTotal, ",")
    
    
    'Update Total Summation Formula
    For i = 3 To intLastCol
        strTotal = "="
        For j = 0 To UBound(arrTotal)
            strTotal = strTotal & "+" & Cells(arrTotal(j), i).Address
        Next j
        Cells(intLastRow, i).Formula = strTotal
    Next i
    
    'Check whether value is zero, colour it red if it is not zero (rounded to 5dp)
    Cells(intLastRow, 5).Select
    If Round(Cells(intLastRow, 5).Value, 5) <> 0 Then
            With Selection.Font
                .Color = -16776961
                .TintAndShade = 0
            End With
    End If
    
    
    'Copy Position Adjustment and NR Breakdown Block
    Application.Workbooks(strMacroFileName).Activate
    Worksheets("Adj_HYvsIG").Activate
    
    Cells(1, 1).Select
    intLastCol = FindLastCol(5, 4)
    intLastRow = FindLastRow(5, intLastRowConst)
    
    Range("A1:" & colLtr(intLastCol) & intLastRow).Select
    
    Selection.Copy
    
    Application.Workbooks(strPTFileName).Activate
    Worksheets(strWSName).Activate
    
    intLastCol = FindLastCol(1, intFirstRow + 1)
    
    Cells(intFirstRow, intLastCol + 2).Select
    ActiveSheet.Paste
    
    'Recalculating UST MV for US TREASURY N/B
    Worksheets("Detail_Report").Activate
    strSecName = "US TREASURY N/B"
    intUSTCount = Application.CountIf(Range("C1:C" & intLastRowConst), strSecName)
    
    dblUSTWeight = 0
    dblUSTCTD = 0
    
    If intUSTCount = 0 Then
        dblUSTWeight = 0
        dblUSTCTD = 0
    ElseIf intUSTCount = 1 Then
     intUSTMVRow = FindCountryRow(strSecName)
     dblUSTWeight = Cells(intUSTMVRow, 17).Value
     dblUSTCTD = Cells(intUSTMVRow, 20).Value
    Else
        intUSTMVRow = FindCountryRow(strSecName)
        dblUSTWeight = Cells(intUSTMVRow, 17).Value
        dblUSTCTD = Cells(intUSTMVRow, 20).Value
        For i = 2 To intUSTCount
            intUSTMVRow = FindCountryRowInstance(strSecName, i)
            dblUSTWeight = dblUSTWeight + Cells(intUSTMVRow, 17).Value
            dblUSTCTD = dblUSTCTD + Cells(intUSTMVRow, 20).Value
        Next i
    End If
    
    'Adding UST 10-YR NOTE FUTURES CTD to CTD Summation (dblUSTCTD)
    'Deprecated 3rd March 2015
'    Worksheets("Detail_Report").Activate
'    strSecName = "UST 10-YR NOTE FUTURES"
'    intUSTCount = Application.CountIf(Range("C1:C" & intLastRowConst), strSecName)
'
'    If intUSTCount = 1 Then
'        intUSTMVRow = FindCountryRow(strSecName)
'        dblUSTCTD = dblUSTCTD + Cells(intUSTMVRow, 20).Value
'    ElseIf intUSTCount > 1 Then
'        intUSTMVRow = FindCountryRow(strSecName)
'        dblUSTCTD = dblUSTCTD + Cells(intUSTMVRow, 20).Value
'
'        For i = 2 To intUSTCount
'            intUSTMVRow = FindCountryRowInstance(strSecName, i)
'            dblUSTCTD = dblUSTCTD + Cells(intUSTMVRow, 20).Value
'        Next i
'    End If
'
'
    Worksheets(strWSName).Activate

    intUSTMVRow = FindCountryRow("UST MV")
    Cells(intUSTMVRow, 14).Select
    ActiveCell.Value = dblUSTWeight
    
    
    'Creating CTD correlated bucket block
    intBlockStartRow = intFirstRow
    intBlockEndRow = intBlockStartRow + 1
    
    intLastRow = FindLastRow(1, intLastRowConst)
    
    intFirstRow = intLastRow + 3
    Cells(intFirstRow, 1).Font.Bold = True
    Cells(intFirstRow, 1).Value = "CTD correlated buckets"
    
    Cells(intFirstRow, 7).Value = "Index Wtd"
    
    
    Call BoldRow(intFirstRow + 1, True)
    Cells(intFirstRow + 1, 1).Value = "UST+futures"
    
    
    
    Call BoldRow(intFirstRow + 3, True)
    Cells(intFirstRow + 3, 1).Value = "IG sov+quasi"
    
    Call BoldRow(intFirstRow + 5, True)
    Cells(intFirstRow + 5, 1).Value = "IG corp"
    
    Call BoldRow(intFirstRow + 7, True)
    Cells(intFirstRow + 7, 1).Value = "HY sov+quasi"
    
    Call BoldRow(intFirstRow + 9, True)
    Cells(intFirstRow + 9, 1).Value = "HY corp"
    
    Call BoldRow(intFirstRow + 11, True)
    Cells(intFirstRow + 11, 1).Value = "Total"
    
    Cells(intFirstRow + 4, 1).Value = "Adj IG sov+quasi"
    Cells(intFirstRow + 4, 5).FormulaR1C1 = "=R[-1]C*R[-1]C[3]"
    
    Cells(intFirstRow + 6, 1).Value = "Adj IG corp"
    Cells(intFirstRow + 6, 5).FormulaR1C1 = "=R[-1]C*R[-1]C[3]"
    
    Cells(intFirstRow + 8, 1).Value = "Adj HY sov+quasi"
    Cells(intFirstRow + 8, 5).FormulaR1C1 = "=R[-1]C*R[-1]C[3]"
    
    Cells(intFirstRow + 10, 1).Value = "Adj HY corp"
    Cells(intFirstRow + 10, 5).FormulaR1C1 = "=R[-1]C*R[-1]C[3]"
    
    Cells(intFirstRow + 12, 1).Value = "Total (adjusted)"
    Cells(intFirstRow + 12, 5).FormulaR1C1 = "=R[-11]C+R[-8]C+R[-6]C+R[-4]C+R[-2]C"
    
    strSource = "F" & intBlockStartRow & ":H" & intBlockEndRow
    strTarget = "C" & intFirstRow - 1
    
    Call CopyBlock(strSource, strTarget, "N")
    

    
    'UST + Futures
    If Cells(intFirstRow - 18, 1).Value <> "-" _
    Or Cells(intFirstRow + 3 - 18, 1).Value <> "CORPORATE" _
    Or Cells(intFirstRow + 7 - 18, 1).Value <> "QUASI-SOVEREIGN" _
    Or Cells(intFirstRow + 11 - 18, 1).Value <> "SOVEREIGN" _
    Or Cells(intFirstRow + 15 - 18, 1).Value <> "Total" Then
    'Safety fuse to abend when error detected
        MsgBox ("Hi " & strUserName & ", misalignment in CTD correlated buckets block detected, skipping the rest of processing")
        Exit Sub
    End If
    Cells(intFirstRow + 1, 3).FormulaR1C1 = "=R[-18]C[3]"
    'Cells(intFirstRow + 1, 4).FormulaR1C1 = "=R[-18]C[3]+RC[6]"
    Cells(intFirstRow + 1, 4).FormulaR1C1 = "=R[-18]C[3]"
    Cells(intFirstRow + 1, 5).FormulaR1C1 = "=RC[-1]-RC[-2]"
    

    'IG sov+quasi

    Cells(intFirstRow + 3, 3).FormulaR1C1 = "=R[-12]C[3]+R[-8]C[3]"
    'Cells(intFirstRow + 3, 4).FormulaR1C1 = "=R[-12]C[3]+R[-8]C[3]-R[-2]C[6]"
    Cells(intFirstRow + 3, 4).FormulaR1C1 = "=R[-12]C[3]+R[-8]C[3]"
    Cells(intFirstRow + 3, 5).FormulaR1C1 = "=RC[-1]-RC[-2]"
    Cells(intFirstRow + 3, 7).FormulaR1C1 = "=R[-12]C[-4]+R[-8]C[-4]"
    
    
    
    'IG corp
    Cells(intFirstRow + 5, 3).FormulaR1C1 = "=R[-18]C[3]"
    Cells(intFirstRow + 5, 4).FormulaR1C1 = "=R[-18]C[3]"
    Cells(intFirstRow + 5, 5).FormulaR1C1 = "=RC[-1]-RC[-2]"
    Cells(intFirstRow + 5, 7).FormulaR1C1 = "=R[-18]C[-4]"
    
    
    
    'HY sov+quasi
    Cells(intFirstRow + 7, 3).FormulaR1C1 = "=R[-17]C[3]+R[-13]C[3]"
    Cells(intFirstRow + 7, 4).FormulaR1C1 = "=R[-17]C[3]+R[-13]C[3]"
    Cells(intFirstRow + 7, 5).FormulaR1C1 = "=RC[-1]-RC[-2]"
    Cells(intFirstRow + 7, 7).FormulaR1C1 = "=R[-17]C[-4]+R[-13]C[-4]"
    
    
    
    'HY corp
    Cells(intFirstRow + 9, 3).FormulaR1C1 = "=R[-23]C[3]"
    Cells(intFirstRow + 9, 4).FormulaR1C1 = "=R[-23]C[3]"
    Cells(intFirstRow + 9, 5).FormulaR1C1 = "=RC[-1]-RC[-2]"
    Cells(intFirstRow + 9, 7).FormulaR1C1 = "=R[-23]C[-4]"
    
    
    
    'Total
    For i = 3 To 9
        
        If i > 5 Then
            i = i + 1
        End If
            
        Cells(intFirstRow + 11, i).FormulaR1C1 = "=SUM(R[-10]C:R[-1]C)"
    Next i
    
    
    Cells(intFirstRow + 11, 5).FormulaR1C1 = "=RC[-1]-RC[-2]"
    
    
    'Copy Correlation and UST Adj Block
    Application.Workbooks(strMacroFileName).Activate
    Worksheets("Adj_HYvsIG").Activate
    
    intLastCol = FindLastColReversed(intLastColConst, 1)
    intLastRow = FindLastRow(11, intLastRowConst)
    
    Range("K1:" & colLtr(intLastCol) & intLastRow).Select
    
    Selection.Copy
    
    Application.Workbooks(strPTFileName).Activate
    Worksheets(strWSName).Activate
    
    Cells(intFirstRow, 8).Select
    ActiveSheet.Paste
    
    Cells(intFirstRow + 1, 10).Value = dblUSTCTD
    Cells(intFirstRow, 9).Value = "Wtd Corr"
    
    For i = 3 To 9
        Cells(intFirstRow + i, 9).FormulaR1C1 = "=RC[-2]*RC[-1]/100"
        i = i + 1
    Next i

    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName
End Sub








Sub BoldRow(intRow As Integer, bolTF As Boolean)
Dim strRow As String
    strRow = intRow & ":" & intRow
    Rows(strRow).Select
    Selection.Font.Bold = bolTF
End Sub


Sub ProcessTemplate()
Dim strWSName As String
Dim intFirstRow As Integer


    strWSName = "Some Worksheet Name"
    
    If VerifyColumns(strWSName) > 0 Then
        MsgBox "Hi " & strUserName & ", I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If
    
    Worksheets(strWSName).Activate
    
    
    'Check whether processing was previously done
    If Cells(intFirstRow, 3).Value <> "" Then
        MsgBox "Hi " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName
End Sub

Sub ProcessCtyRatings()
Dim strWSName As String
Dim intFirstRow As Integer
Dim intLastCol As Integer
Dim intLastRow As Integer
Dim intCountryRow As Integer
Dim strCountry As String
Dim intCounter As Integer
Dim intChinaHighBetaRow As Integer
Dim intChinaLowBetaRow As Integer
Dim intSubTotalTopRow As Integer
Dim intSubTotalBottomRow As Integer
Dim intIndoStartRow As Integer
Dim intIndoEndRow As Integer
Dim dblIndoCorpMV As Double
Dim dblIndoCorpYTW As Double
Dim dblIndoCorpCTSD As Double
Dim dblIndoQuasiMV As Double
Dim dblIndoQuasiYTW As Double
Dim dblIndoQuasiCTSD As Double
Dim arrCorpRatings As Variant
Dim varTestRating As Variant
Dim strTotal As String
Dim arrTotal As Variant
Dim j As Integer


    strWSName = "CtyRatings_Report"
    
    If VerifyColumns(strWSName) > 0 Then
        MsgBox "Hi " & strUserName & ", I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If
    
    Worksheets(strWSName).Activate
    
    intFirstRow = FindFirstRow(3)
    
    'Check whether processing was previously done
    If Cells(intFirstRow, 22).Value <> "" Then
        MsgBox "Hi " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    'Copy template over
    Application.Workbooks(strMacroFileName).Activate
    Worksheets("Adj_CtyRatings").Activate
    
    Cells(1, 1).Select
    intLastCol = FindLastCol(1, 1)
    intLastRow = FindLastRow(1, intLastRowConst)
    
    Range("A1:" & colLtr(intLastCol) & intLastRow).Select
    
    Selection.Copy
    
    Application.Workbooks(strPTFileName).Activate
    Worksheets(strWSName).Activate
    
    intLastCol = FindLastCol(1, 25)
    
    Cells(intFirstRow, intLastCol + 2).Select
    ActiveSheet.Paste
    intSubTotalTopRow = intFirstRow
    
    
    arrCorpRatings = Array("BB+", "BB", "BB-", "B+", "B", "B-", "CCC+", "CCC", "CCC-", "CC", "CC+", "CC-", "C", "C+", "C-", "DDD", "DD", "D", "N/A")
    
    'Collect Indo data from SectorRating_Report
    Worksheets("SectorRating_Report").Activate
    
    Cells(1, 1).Select
    intIndoStartRow = FindCountryRowInCol("Indonesia")
    intIndoEndRow = FindCountryRowInCol("Indonesia Subtotal")
    
    For intCounter = intIndoStartRow + 1 To intIndoEndRow - 2
        'Handling Quasi
        If Cells(intCounter, 2).Value = "QUASI_SOV" Then
            'Collecting values on rows with ratings
            Do Until Cells(intCounter + 1, 2).Value = "QUASI_SOV Subtotal"
                dblIndoQuasiMV = Cells(intCounter + 1, 6).Value + dblIndoQuasiMV
                dblIndoQuasiYTW = Cells(intCounter + 1, 9).Value + dblIndoQuasiYTW
                dblIndoQuasiCTSD = Cells(intCounter + 1, 18).Value + dblIndoQuasiCTSD
                intCounter = intCounter + 1
            Loop
        Else
        'Everything else falls into Corp, taking into account of ratings
            varTestRating = Filter(arrCorpRatings, Cells(intCounter + 1, 3).Value)
            If UBound(varTestRating) >= 0 And Cells(intCounter + 1, 3).Value <> "" Then
                'Found in array, add to bucket
                dblIndoCorpMV = Cells(intCounter + 1, 6).Value + dblIndoCorpMV
                dblIndoCorpYTW = Cells(intCounter + 1, 9).Value + dblIndoCorpYTW
                dblIndoCorpCTSD = Cells(intCounter + 1, 18).Value + dblIndoCorpCTSD
            End If
        End If

    Next intCounter
    
    
    Worksheets(strWSName).Activate
    
    intFirstRow = FindFirstRow(3)
    intLastCol = FindLastCol(1, 25)
    intLastRow = FindLastRow(intLastCol + 2, intLastRowConst)
    
    For intCounter = intFirstRow + 1 To intLastRow - 1
        strCountry = Cells(intCounter, intLastCol + 2).Value
        If InStr(1, strCountry, " ") - 1 < 0 Then
            'For single word countries
'            MsgBox ("Single Word Countries " & strCountry)
            strCountry = Trim(strCountry)
            intCountryRow = FindCountryRowInCol(strCountry)
            If Cells(intCountryRow + 1, 2).Value = "High Yield" Then
                '%MKV column
                Cells(intCounter, 23).Formula = "=" & Cells(intCountryRow + 1, 5).Address
                'YTW column
                Cells(intCounter, 24).Formula = "=" & Cells(intCountryRow + 1, 11).Address
                'CTSD Override column
                Cells(intCounter, 25).Formula = "=" & Cells(intCountryRow + 1, 20).Address
            End If
        Else
            strCountry = Left(strCountry, InStr(1, strCountry, " ") - 1)
            If strCountry = "Subtotal" Then
                'Processing subtotal rows
                intSubTotalBottomRow = intCounter
                Cells(intSubTotalBottomRow, 23).Formula = "=SUM(W" & intSubTotalTopRow + 1 & ":W" & intSubTotalBottomRow - 1 & ")"
                Cells(intSubTotalBottomRow, 24).Formula = "=SUM(X" & intSubTotalTopRow + 1 & ":X" & intSubTotalBottomRow - 1 & ")"
                Cells(intSubTotalBottomRow, 25).Formula = "=SUM(Y" & intSubTotalTopRow + 1 & ":Y" & intSubTotalBottomRow - 1 & ")"
                intSubTotalTopRow = intSubTotalBottomRow
            Else
                'Processing countries
                If strCountry = "China" Then
'                    MsgBox "China"
                    If intChinaHighBetaRow = 0 Then
                        intChinaHighBetaRow = intCounter '26
                    Else
                        intChinaLowBetaRow = intCounter '37
                    End If
                ElseIf strCountry = "Indonesia" Then
'                    MsgBox "Indonesia"
                    If Cells(intCounter, 22).Value = "Indonesia CORPS" Then
                        '%MKV column
                        Cells(intCounter, 23).Value = dblIndoCorpMV
                        'YTW column
                        Cells(intCounter, 24).Value = dblIndoCorpYTW
                        'CTSD Override column
                        Cells(intCounter, 25).Value = dblIndoCorpCTSD
                    ElseIf Cells(intCounter, 22).Value = "Indonesia QUASI" Then
                        '%MKV column
                        Cells(intCounter, 23).Value = dblIndoQuasiMV
                        'YTW column
                        Cells(intCounter, 24).Value = dblIndoQuasiYTW
                        'CTSD Override column
                        Cells(intCounter, 25).Value = dblIndoQuasiCTSD
                    End If
                Else
                    'All other countries
                    'MsgBox ("All other countries " & strCountry)
                    intCountryRow = FindCountryRowInCol(strCountry)
                    If Cells(intCountryRow + 1, 2).Value = "High Yield" Then
                        '%MKV column
                        Cells(intCounter, 23).Formula = "=" & Cells(intCountryRow + 1, 5).Address
                        'YTW column
                        Cells(intCounter, 24).Formula = "=" & Cells(intCountryRow + 1, 11).Address
                        'CTSD Override column
                        Cells(intCounter, 25).Formula = "=" & Cells(intCountryRow + 1, 20).Address
                    End If
                End If
            End If
        End If
    
        
    Next intCounter
    
    'Process formulas for China Row
    intCountryRow = FindCountryRowInCol("China")
    If Cells(intCountryRow + 1, 2).Value = "High Yield" Then
        '%MKV column
        Cells(intChinaHighBetaRow, 23).Formula = "=" & Cells(intCountryRow + 1, 5).Address & "-" & Cells(intChinaLowBetaRow, 23).Address
        'YTW column
        Cells(intChinaHighBetaRow, 24).Formula = "=" & Cells(intCountryRow + 1, 11).Address & "-" & Cells(intChinaLowBetaRow, 24).Address
        'CTSD Override column
        Cells(intChinaHighBetaRow, 25).Formula = "=" & Cells(intCountryRow + 1, 20).Address & "-" & Cells(intChinaLowBetaRow, 25).Address
    End If
    
    
    'Pick up Subtotal Rows, add to strTotal
    For intCounter = intFirstRow To intLastRow '24 to 45
        If Left(Cells(intCounter, 22).Value, 8) = "Subtotal" Then
            strTotal = strTotal & intCounter & ","
        End If
    Next intCounter
    
    strTotal = Left(strTotal, Len(strTotal) - 1)
    
    arrTotal = Split(strTotal, ",")
    
    
    'Update Total Summation Formula
    For intCounter = 23 To 25
        strTotal = "="
        For j = 0 To UBound(arrTotal)
            strTotal = strTotal & "+" & Cells(arrTotal(j), intCounter).Address
        Next j
        Cells(intLastRow, intCounter).Formula = strTotal
    Next intCounter
    
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName
End Sub



Sub ProcessSectorReport()
Dim strWSName As String
Dim intFirstRow As Integer
On Error GoTo CheckOverflow


    strWSName = "Sector_Report"
    
    If VerifyColumns(strWSName) > 0 Then
        MsgBox "Hi " & strUserName & ", I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If
    
    Worksheets(strWSName).Activate
    
    
    intFirstRow = FindFirstRow(19)

    
    'Check whether processing was previously done
    If intFirstRow > 0 Then
        MsgBox "Hi " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    
    Call ManualSectorReportOverride(strWSName)
    
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName


CheckOverflow:
If Err.Number = 6 Then
    'Fresh sheet, proceed with processing
    Resume Next
Else
    If Err.Number > 0 Then
        MsgBox "Hi " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
End If

End Sub



Sub ProcessDBCTDIndexExp()
Dim strWSName As String
Dim strWSSource As String
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intSourceRow As Integer
Dim intFirstCountryRow As Integer
Dim intLastCountryRow As Integer
Dim intFirstCol As Integer
Dim intSourceCol As Integer
Dim intLastCol As Integer
Dim intCounter As Integer
Dim arrBuckets As Variant
Dim strCopySource As String
Dim strCopyTarget As String
Dim dblLess3 As Double
Dim dbl3To5 As Double
Dim dbl5To7 As Double
Dim dbl7To10 As Double
Dim dbl10To15 As Double
Dim dblMore15 As Double
Dim arrRates As Variant

    strWSName = "DurbuckCTD_Index Exposure"
    
    
    If VerifyColumns(strWSName) > 0 Then
        MsgBox "Hi " & strUserName & ", I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If
    
    Worksheets(strWSName).Activate
    
    
    intLastRow = FindLastRow(1, intLastRowConst) '131
    'MsgBox intLastRow
    
    
    'Fix the Total Calculation
    intLastCol = FindLastCol(3, intLastRow)
    
    intFirstRow = FindFirstRowReversed(1)
    
    For intCounter = 3 To intLastCol
        Cells(intLastRow, intCounter).Formula = "=sum(" & colLtr(intCounter) & intFirstRow + 1 & ":" & colLtr(intCounter) & intLastRow - 1 & ")"
    Next intCounter
    


    intLastCountryRow = FindLastRow(2, intLastRowConst) '130
    intFirstCountryRow = FindFirstRowReversed(2) '48

    'Generate CTD Summary
    intFirstRow = intLastRow + 3 '134
    
    'Check whether processing was previously done
    If Cells(intFirstRow, 3).Value <> "" Then
        MsgBox "Hi " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    intFirstCol = 2
    arrBuckets = Array("CTD", "<3y", "3-5y", "5-7y", "7-10y", "10-15y", ">15y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)

    intFirstRow = intFirstRow + 1
    intFirstCol = 3
    intSourceCol = 6

    For intCounter = 1 To UBound(arrBuckets) - 1
        
        Cells(intFirstRow, intFirstCol).Formula = "=" & Cells(intLastRow, intSourceCol).Address
        intFirstCol = intFirstCol + 1
        intSourceCol = intSourceCol + 4
    Next intCounter

    'Total Summation
    Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-6]:RC[-1])"

    intFirstRow = intFirstRow + 2
    intFirstCol = 4
    arrBuckets = Array("5y", "", "10y", "", "30y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    intFirstCol = 4
    intFirstRow = intFirstRow + 1




    For intCounter = 1 To UBound(arrBuckets) - 1

        If intCounter = 4 Then
            'Formula for Total
            intFirstCol = intFirstCol - 1
            Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-6]:RC[-1])"
        Else
            'Combining 2 year group weights
            Cells(intFirstRow, intFirstCol).Formula = "=R[-3]C[-1]+R[-3]C"
            intFirstCol = intFirstCol + 1
        End If
        intFirstCol = intFirstCol + 1

    Next intCounter


    'Rates table
    intFirstRow = intFirstRow + 2
    intFirstCol = 2
    arrBuckets = Array("Rates", "<3y", "3-5y", "5-7y", "7-10y", "10-15y", ">15y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)

    intFirstCol = 3

    'Flip to Detail Report to collect rates from US positions
'    dblLess3 = 1.1
'    dbl3To5 = 2.2
'    dbl5To7 = 3.3
'    dbl7To10 = 4.4
'    dbl10To15 = 5.5
'    dblMore15 = 6.6
    
    strWSSource = "Detail_Report"

    Worksheets(strWSSource).Activate
    
    intFirstCountryRow = FindCountryRow("United States") + 1
    intLastCountryRow = FindCountryRow("United States Subtotal ") - 1
    
    For intCounter = intFirstCountryRow To intLastCountryRow
        If Cells(intCounter, 7).Value < 3 Then
            dblLess3 = dblLess3 + Cells(intCounter, 20).Value
        ElseIf Cells(intCounter, 7).Value >= 3 And Cells(intCounter, 7).Value < 5 Then
            dbl3To5 = dbl3To5 + Cells(intCounter, 20).Value
        ElseIf Cells(intCounter, 7).Value >= 5 And Cells(intCounter, 7).Value < 7 Then
            dbl5To7 = dbl5To7 + Cells(intCounter, 20).Value
        ElseIf Cells(intCounter, 7).Value >= 7 And Cells(intCounter, 7).Value < 10 Then
            dbl7To10 = dbl7To10 + Cells(intCounter, 20).Value
        ElseIf Cells(intCounter, 7).Value >= 10 And Cells(intCounter, 7).Value < 15 Then
            dbl10To15 = dbl10To15 + Cells(intCounter, 20).Value
        Else
            dblMore15 = dblMore15 + Cells(intCounter, 20).Value
        End If
    Next intCounter
    
    Worksheets(strWSName).Activate
    
    arrRates = Array(dblLess3, dbl3To5, dbl5To7, dbl7To10, dbl10To15, dblMore15)
    
    intFirstRow = FindLastRow(2, intLastRowConst) + 1
    For intCounter = 1 To UBound(arrBuckets)

        If intCounter = 7 Then
            'Formula for Total
            Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-6]:RC[-1])"
        Else
            Cells(intFirstRow, intFirstCol).Value = arrRates(intCounter - 1)
        End If
        intFirstCol = intFirstCol + 1
        
    Next intCounter

   
    
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName
End Sub




Sub ProcessDBCTDIndexExp2()
'Deprecated, no longer in use
Dim strWSName As String
Dim strWSSource As String
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intSourceRow As Integer
Dim intFirstCountryRow As Integer
Dim intLastCountryRow As Integer
Dim intFirstCol As Integer
Dim intSourceCol As Integer
Dim intLastCol As Integer
Dim intCounter As Integer
Dim arrBuckets As Variant
Dim strCopySource As String
Dim strCopyTarget As String

    strWSName = "DurbuckCTD_Index Exposure"
    
    
    If VerifyColumns(strWSName) > 0 Then
        MsgBox "Hi " & strUserName & ", I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If
    
    Worksheets(strWSName).Activate
    
    
    intLastRow = FindLastRow(1, intLastRowConst) '131
    'MsgBox intLastRow
    
    
    'Fix the Total Calculation
    intLastCol = FindLastCol(3, intLastRow)
    
    intFirstRow = FindFirstRowReversed(1)
    
    For intCounter = 3 To intLastCol
        Cells(intLastRow, intCounter).Formula = "=sum(" & colLtr(intCounter) & intFirstRow + 1 & ":" & colLtr(intCounter) & intLastRow - 1 & ")"
    Next intCounter
    


    intLastCountryRow = FindLastRow(2, intLastRowConst) '130
    intFirstCountryRow = FindFirstRowReversed(2) '48

    'Generate CTD Summary
    intFirstRow = intLastRow + 3 '134
    
    'Check whether processing was previously done
    If Cells(intFirstRow, 3).Value <> "" Then
        MsgBox "Hi " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    intFirstCol = 2
    arrBuckets = Array("CTD", "2y", "5y", "10y", "30y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)

    intFirstRow = intFirstRow + 1
    intFirstCol = 3
    intSourceCol = 6

    For intCounter = 1 To UBound(arrBuckets) - 1

        If intCounter > 2 Then
            'Combining weights from 2 categories for 10y and 30y categories
            Cells(intFirstRow, intFirstCol).Formula = "=" & Cells(intLastRow, intSourceCol).Address & "+" & Cells(intLastRow, intSourceCol + 4).Address
            '30y categories add cell below
            If intCounter > 3 Then
                Cells(intFirstRow, intFirstCol).Formula = Cells(intFirstRow, intFirstCol).Formula & "+" & Cells(intLastRow + 1, intSourceCol + 4).Address
            End If
            intSourceCol = intSourceCol + 4
        Else
            Cells(intFirstRow, intFirstCol).Formula = "=" & Cells(intLastRow, intSourceCol).Address
        End If
        intFirstCol = intFirstCol + 1
        intSourceCol = intSourceCol + 4
    Next intCounter

    'Total Summation
    Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-4]:RC[-1])"

    intFirstRow = intFirstRow + 2
    intFirstCol = 4
    arrBuckets = Array("5y", "10y", "30y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    intFirstCol = 4
    intFirstRow = intFirstRow + 1




    For intCounter = 1 To UBound(arrBuckets) + 1

        If intCounter = 4 Then
            'Formula for Total
            Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-3]:RC[-1])"
        ElseIf intCounter = 1 Then
            'Combining 2y and 5y weights
            Cells(intFirstRow, intFirstCol).Formula = "=R[-3]C[-1]+R[-3]C"
        Else
            Cells(intFirstRow, intFirstCol).Formula = "=R[-3]C"
        End If
        intFirstCol = intFirstCol + 1

    Next intCounter





    'Set Current UST Positioning
    intFirstRow = intLastRow + 3
    Cells(intFirstRow, 9).Value = "Current UST Positioning"
    arrBuckets = Array("2y", "5y", "10y", "30y", "", "Trades", "2y", "5y", "10y", "30y")
    intFirstRow = intFirstRow + 1

    Call CreateColumnArray(9, intFirstRow, arrBuckets)


    'Copy CTSD Block from DurbuckCTDOV_Index Exposure
    intFirstRow = intLastRow + 3 '134
    intFirstCol = 12

    strWSSource = "DurbuckCTDOV_Index Exposure"

    Worksheets(strWSSource).Activate
    intLastRow = FindLastRow(15, intLastRowConst) '131

    Range("B" & intLastRow + 3 & ":G" & intLastRow + 7).Select
    Selection.Copy


    Worksheets(strWSName).Activate
    Cells(intFirstRow, intFirstCol).Select
    ActiveCell.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False


    intFirstRow = intFirstRow + 7
    intFirstCol = 2
    arrBuckets = Array("Rates (by deduction)", "2y", "5y", "10y", "30y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)

    intFirstRow = intFirstRow + 1

    intFirstCol = 2
    For intCounter = 1 To UBound(arrBuckets)
        If intCounter = 5 Then
            'Formula for Total
            Cells(intFirstRow, intFirstCol + 1).Formula = "=SUM(RC[-4]:RC[-1])"
        Else
            Cells(intFirstRow, intFirstCol + 1).Formula = "=R[-7]C-R[-7]C[10]"
        End If
        intFirstCol = intFirstCol + 1
    Next intCounter


    'Consolidate to 5y, 10y, 30y and Total
    intFirstRow = intFirstRow + 2
    intFirstCol = 4
    arrBuckets = Array("5y", "10y", "30y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    intFirstCol = 4

    intFirstRow = intFirstRow + 1
    For intCounter = 1 To UBound(arrBuckets) + 1

        If intCounter = 4 Then
            'Formula for Total
            Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-3]:RC[-1])"
        Else
            Cells(intFirstRow, intFirstCol).Formula = "=R[-7]C-R[-7]C[10]"
        End If
        intFirstCol = intFirstCol + 1

    Next intCounter


    'Rates table
    intFirstRow = intFirstRow + 2
    intFirstCol = 2
    arrBuckets = Array("Rates", "2y", "5y", "10y", "30y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)

    intFirstCol = 3

    intFirstRow = intFirstRow + 1
    For intCounter = 1 To UBound(arrBuckets)

        If intCounter = 5 Then
            'Formula for Total
            Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-4]:RC[-1])"
        Else
            Cells(intFirstRow, intFirstCol).Formula = "=" & Cells(intLastRow + 3 + intCounter, 10).Address

        End If
        intFirstCol = intFirstCol + 1

    Next intCounter

    'Copy CTD Block from above
    strCopySource = "B" & intLastRow + 3 & ":G" & intLastRow + 7

    intFirstRow = FindLastRow(7, intLastRowConst)
    intFirstCol = 2

    Cells(intFirstRow + 2, intFirstCol).Select

    strCopyTarget = ActiveCell.Address

    Call CopyBlock(strCopySource, strCopyTarget, "N")

    intFirstRow = FindLastRow(2, intLastRowConst)
    Cells(intFirstRow, 2).Value = "=""" & Cells(intFirstRow, 2).Value & " Today"""

    intLastRow = FindFirstRowReversed(2)

    strCopySource = "B" & intLastRow & ":G" & intLastRow + 1

    intFirstRow = FindLastRow(7, intLastRowConst)
    intFirstCol = 2

    Cells(intFirstRow + 2, intFirstCol).Select

    strCopyTarget = ActiveCell.Address

    Call CopyBlock(strCopySource, strCopyTarget, "N")

    intFirstRow = FindLastRow(2, intLastRowConst)
    Cells(intFirstRow, 2).Value = "=""" & Cells(intFirstRow, 2).Value & " Today"""
    
    
    'Process CTD (credit) block
    intFirstRow = FindLastRow(17, intLastRowConst) + 2
    
    
    intFirstCol = 12
    arrBuckets = Array("CTSD (credit)", "2y", "5y", "10y", "30y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    
    intFirstCol = 13
    
    intFirstRow = intFirstRow + 1
    intSourceRow = FindLastRow(1, intLastRowConst) + 4
    intSourceCol = 3
    intLastRow = FindLastRow(3, intLastRowConst)
    For intCounter = 1 To UBound(arrBuckets)
        
        If intCounter = 5 Then
            'Formula for Total
            Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-4]:RC[-1])"
        Else
            Cells(intFirstRow, intFirstCol).Formula = "=" & Cells(intSourceRow, intSourceCol).Address & "-" & Cells(intLastRow, intSourceCol).Address
            
        End If
        intFirstCol = intFirstCol + 1
        intSourceCol = intSourceCol + 1
    Next intCounter
    
    'Consolidate to 5y, 10y, 30y and Total
    intFirstRow = intFirstRow + 2
    intFirstCol = 14
    arrBuckets = Array("5y", "10y", "30y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    intFirstCol = 14
    
    intFirstRow = intFirstRow + 1
    For intCounter = 1 To UBound(arrBuckets) + 1
        
        If intCounter = 4 Then
            'Formula for Total
            Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-3]:RC[-1])"
        ElseIf intCounter = 1 Then
            'Combining 2y and 5y weights
            Cells(intFirstRow, intFirstCol).Formula = "=R[-3]C[-1]+R[-3]C"
        Else
            Cells(intFirstRow, intFirstCol).Formula = "=R[-3]C"
        End If
        intFirstCol = intFirstCol + 1
        
    Next intCounter
    
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName
End Sub




Sub ProcessJaci()
Dim strWSName As String
Dim intLastRow As Integer
Dim WB As Workbook
Dim WS As Worksheet
Dim strJACI As String

On Error GoTo ErrHandle


Set WB = ActiveWorkbook

    For Each WS In WB.Worksheets
        strJACI = WS.Name
        'MsgBox strJACI
        If Left(strJACI, 4) = "jaci" Then
            WS.Name = "jaci"
            'strWSName = strJACI
        End If
    Next WS


    strWSName = "jaci"
    'Check if Jaci worksheet exists, exit loop if not found
    Worksheets(strWSName).Activate
    
MainProcess:
    Worksheets(strWSName).Activate
    
    If VerifyColumns(Left(strWSName, 4)) > 0 Then
        MsgBox "Hi " & strUserName & ", I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If
    
    'Check whether processing was previously done
    If Cells(1, 22).Value = "CTSD" Then
        MsgBox "Hi, " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    

    intLastRow = FindLastRow(1, intLastRowConst)
    
    'Add CTSD, PX_BID column and cookie column
    Columns("V:V").Select
    'CTSD column in V
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Range("V1").Select
    ActiveCell.FormulaR1C1 = "CTSD"
    Range("V2").Select
    ActiveCell.FormulaR1C1 = "=RC[-6]*RC[-1]/100"
    Range("V2").Select
    'Selection.AutoFill Destination:=Range("V2:V940")
    Selection.AutoFill Destination:=Range("V2:V" & intLastRow)
    'Range("V1:V940").Select
    Columns("V:V").Select
    Selection.ColumnWidth = 24.6
    With Selection.Font
        'Make this column red
        .Color = -16776961
        .TintAndShade = 0
    End With
    
    Columns("AA:AA").Select
    'px_bid column in AA
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Range("AA1").Select
    ActiveCell.FormulaR1C1 = "px_bid"
    
    Range("AA2").Select
    ActiveCell.FormulaR1C1 = "=BDP(RC[-24]&"" CORP"", ""PX_BID"")"
    
    Columns("AB:AB").Select
    'cookie column in AB
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Range("AB1").Select
    ActiveCell.FormulaR1C1 = "cookie"
    
    Range("AB2").Select
    ActiveCell.FormulaR1C1 = "=(RC[-1]/RC[-2]-1)*100*RC[-12]"
    
    
    Range("AA2:AB2").Select
    'Selection.AutoFill Destination:=Range("AA2:AB940")
    Selection.AutoFill Destination:=Range("AA2:AB" & intLastRow)
    
    Columns("AA:AB").Select
    Selection.ColumnWidth = 24.6
    With Selection.Font
        'Make this column red
        .Color = -16776961
        .TintAndShade = 0
    End With
    
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    Rows("2:2").Select
    Selection.Delete Shift:=xlUp
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName
    Exit Sub
ErrHandle:
    'MsgBox Err.Number & " " & Err.Description
    If Err.Number = 9 Then
        'jaci worksheet not found
        'MsgBox strWSName & " worksheet not found, skipping to next available worksheet"
        GoTo CheckJaciWB
    End If
    
CheckJaciWB:
    'Checking whether jaci workbook is available in the background
    Call SwitchWB("jaci")
    If intGoodFile = 1 Then
        Exit Sub
    Else
    'Switch to jaci workbook, copy it into PT workbook and rename tab to jaci
    
        'strJACI = Left(strJaciFileName, InStr(strJaciFileName, ".") - 1)
        strJACI = ActiveSheet.Name
        Windows(strJaciFileName).Activate
        Sheets(strJACI).Select
        Sheets(strJACI).Copy Before:=Workbooks( _
        strPTFileName).Sheets(1)
        Sheets(strJACI).Select
        Sheets(strJACI).Name = "jaci"
    
        Resume MainProcess
    End If
End Sub


Sub ProcessDetailReport()
Dim strWSName As String
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intCounter As Integer
Dim intTotalRow As Integer

    strWSName = "Detail_Report"
    
    If VerifyColumns(strWSName) > 0 Then
        MsgBox "Hi " & strUserName & ", I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If

    Worksheets(strWSName).Activate
    'Add PX_BID column and cookie column
    
    Columns("M:M").Select
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    
    intFirstRow = FindFirstRow(3)
    'MsgBox intFirstRow
    
    intLastRow = FindLastRow(3, intLastRowConst)
    
    'Range("M26").Select
    Cells(intFirstRow, 13).Select
    ActiveCell.FormulaR1C1 = "PX_BID"
    
    'Range("N26").Select
    Cells(intFirstRow, 14).Select
    ActiveCell.FormulaR1C1 = "Cookie"
    
    intFirstRow = intFirstRow + 3
    'Range("M31").Select
    Cells(intFirstRow, 13).Select
    ActiveCell.FormulaR1C1 = "=BDP(RC[-11]&"" ""&""CORP"", ""PX_BID"")"
    
    Cells(intFirstRow, 14).Select
    ActiveCell.FormulaR1C1 = "=(RC[-1]/RC[-2]-1)*100*RC[3]"
    
    With Worksheets("Detail_Report").Range("M" & intFirstRow)
        .AutoFill Destination:=Range("M" & intFirstRow & ":M" & intLastRow)
    End With
    
    With Worksheets("Detail_Report").Range("N" & intFirstRow)
        .AutoFill Destination:=Range("N" & intFirstRow & ":N" & intLastRow)
    End With

    'Remove formulas where ISIN is blank or starts with CASH or TREASURY BILL
    For intCounter = intFirstRow To intLastRow
        If (Cells(intCounter, 2).Value = "" Or Left(Cells(intCounter, 3).Value, 4) = "CASH" Or Left(Cells(intCounter, 3).Value, 13) = "TREASURY BILL") Then
            Cells(intCounter, 13).Value = ""
            Cells(intCounter, 14).Value = ""
        End If
    Next intCounter
    
    intTotalRow = FindLastRow(22, intLastRowConst)
    'Handle futures: 2Yr Futures Formula + ISIN handling
    For intCounter = intFirstRow To intLastRow
        If Left(Cells(intCounter, 3).Value, 4) = "UST " Then
            Cells(intCounter, 13).Select
            ActiveCell.FormulaR1C1 = "=BDP(RIGHT(RC[-11],LEN(RC[-11])-4) &"" COMDTY"", ""PX_BID"")"
            
            If Left(Cells(intCounter, 3).Value, 8) = "UST 2-YR" Then
                Cells(intCounter, 17).Select
                ActiveCell.Formula = "=(W" & intCounter & ") * 2000000 /" & "W" & intTotalRow & "/10 * L" & intCounter
            Else
                Cells(intCounter, 17).Select
                ActiveCell.Formula = "=(W" & intCounter & ") * 1000000 /" & "W" & intTotalRow & "/10 * L" & intCounter
            End If
        End If
    Next intCounter
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName
End Sub


Sub ProcessDBCTDOVYTWIndexExp()
Dim strWSName As String
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intFirstCountryRow As Integer
Dim intLastCountryRow As Integer
Dim arrBuckets As Variant
Dim intFirstCol As Integer
Dim intSourceCol As Integer
Dim intCounter As Integer
Dim intCountryCount As Integer
Dim intLastCol As Integer
Dim strFundCode As String
Dim dblRowSum As Double

    intGoodFile = 0
    
    strWSName = "DurbuckCTDOVYTW_Index Exposure"

    If VerifyColumns(strWSName) > 0 Then
        MsgBox "I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If

    Worksheets(strWSName).Activate
    
    
    intLastRow = FindLastRow(1, intLastRowConst) '131
    'MsgBox intLastRow
    
    intFirstRow = intLastRow + 3 '134
    
    'Check whether processing was previously done
    If Cells(intFirstRow, 3).Value <> "" Then
        MsgBox "Hi " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    
    
    'Fix the Total Calculation
    intLastCol = FindLastCol(3, intLastRow)
    
    intFirstRow = FindFirstRowReversed(1) '29
    
    
    
    'Expand the whole block first
    Rows(intFirstRow & ":" & intLastRow).Select
    Selection.EntireRow.Hidden = False
    
    intFirstCol = 3
    
    'Hide those genuine empty rows
    For intCounter = intFirstRow + 1 To intLastRow - 1
        Cells(intCounter, intLastCol + 1).FormulaArray = "=Sum(abs(" & colLtr(intFirstCol) & intCounter & ":" & colLtr(intLastCol) & intCounter & "))"
        If Cells(intCounter, intLastCol + 1).Value = 0 Then
            Rows(intCounter).Select
            Selection.EntireRow.Hidden = True
        End If
        Cells(intCounter, intLastCol + 1).Formula = ""
    Next intCounter
    
    
    For intCounter = 3 To intLastCol
        Cells(intLastRow, intCounter).Formula = "=sum(" & colLtr(intCounter) & intFirstRow + 1 & ":" & colLtr(intCounter) & intLastRow - 1 & ")"
    Next intCounter
    


    intLastCountryRow = FindLastRow(2, intLastRowConst) '130
    intFirstCountryRow = FindFirstRowReversed(2) '48

    'Generate CTSD Summary
    
    strFundCode = Cells(FindCountryRow("Account"), 2).Value
    
    intFirstRow = intLastRow + 3 '134
    
    intFirstCol = 2
    arrBuckets = Array("CTSD", "<3y", "3-5y", "5-7y", "7-10y", "10-15y", ">15y", "Total CTSD", "Total MV%", "Total YTW", "CTSD Check")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    
    intFirstRow = intFirstRow + 1
    intFirstCol = 3
    intSourceCol = 8
    
    For intCounter = 1 To UBound(arrBuckets) - 4
        Cells(intFirstRow, intFirstCol).Formula = "=" & Cells(intLastRow, intSourceCol).Address
        intFirstCol = intFirstCol + 1
        intSourceCol = intSourceCol + 6
    Next intCounter
    
    'Total Summation CTSD
    Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-6]:RC[-1])"
    
    'Total Summation MV%
    Cells(intFirstRow, intFirstCol + 1).Formula = "=" & Cells(intLastRow, intLastCol - 2).Address
    
    'Total Summation YTW
    Cells(intFirstRow, intFirstCol + 2).Formula = "=" & Cells(intLastRow, intLastCol - 1).Address
    
    'Total Summation CTSD (check)
    Cells(intFirstRow, intFirstCol + 3).Formula = "=" & Cells(intLastRow, intLastCol).Address
    
    intFirstRow = intFirstRow + 2
    intFirstCol = 4
       
    arrBuckets = Array("5y", "", "10y", "", "30y", "Total CTSD")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    intFirstCol = 4
    intFirstRow = intFirstRow + 1


    For intCounter = 1 To UBound(arrBuckets) - 1

        If intCounter = 4 Then
            'Formula for Total
            intFirstCol = intFirstCol - 1
            Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-6]:RC[-1])"
        Else
            'Combining 2 year group weights
            Cells(intFirstRow, intFirstCol).Formula = "=R[-3]C[-1]+R[-3]C"
            intFirstCol = intFirstCol + 1
        End If
        intFirstCol = intFirstCol + 1

    Next intCounter
    
    
    
    intFirstRow = intFirstRow + 2
    intFirstCol = 3
    arrBuckets = Array("<3y", "'3-5y", "'5-7y", "'7-10y", "'10-15y", ">15y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    
    intFirstRow = intFirstRow + 1
    intFirstCol = 2
    
    'Copy Country Block
    Call CopyBlock("B" & intFirstCountryRow & ":B" & intLastCountryRow, "B" & intFirstRow, "Y")
    
    intCountryCount = Selection.Rows.Count '14
    
    'Copy Total MV and Total YTW
    Call CopyBlock("AP" & intFirstCountryRow & ":AR" & intLastCountryRow, "J" & intFirstRow, "Y")
    

    
    'Label Total MV and Total YTW
    Cells(intFirstRow - 1, 10).Value = "Total MV%"
    Cells(intFirstRow - 1, 11).Value = "Total YTW"
    Cells(intFirstRow - 1, 12).Value = "CTSD Check"
    
    intFirstCountryRow = intFirstRow '141
    intLastCountryRow = FindLastRow(2, intLastRowConst) '154
    intLastRow = intLastCountryRow + 1 '155
    
    'Set formula with "=" for the cells within the Total MV,Total YTW and CTSD Check block
    For intCounter = intFirstCountryRow To intLastCountryRow
        Cells(intCounter, 10).Formula = "=" & Cells(intCounter, 10).Value
        Cells(intCounter, 11).Formula = "=" & Cells(intCounter, 11).Value
        Cells(intCounter, 12).Formula = "=" & Cells(intCounter, 12).Value
    Next intCounter
    
    
    Call MapDurationCountry(intCountryCount, intFirstCountryRow, 8, 3, 6)
    
    
    Call ManualIndexPortOverride(intFirstCountryRow, strWSName, strFundCode)
    
    
    If intGoodFile = 1 Then
        MsgBox "Hi " & strUserName & ", I cannot find the Index Portfolio Override template for this fund.  Please update " & strMacroFileName & " file."
        intGoodFile = 0
        Exit Sub
    End If
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With

    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName

End Sub






Sub ProcessDBCTDOVIndexExp()
Dim strWSName As String
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intFirstCountryRow As Integer
Dim intLastCountryRow As Integer
Dim arrBuckets As Variant
Dim intFirstCol As Integer
Dim intSourceCol As Integer
Dim intCounter As Integer
Dim intCountryCount As Integer
Dim intLastCol As Integer
Dim strFundCode As String
Dim dblRowSum As Double

    intGoodFile = 0
    
    strWSName = "DurbuckCTDOV_Index Exposure"

    If VerifyColumns(strWSName) > 0 Then
        MsgBox "I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If

    Worksheets(strWSName).Activate
    
    
    intLastRow = FindLastRow(1, intLastRowConst) '131
    'MsgBox intLastRow
    
    intFirstRow = intLastRow + 3 '134
    
    'Check whether processing was previously done
    If Cells(intFirstRow, 3).Value <> "" Then
        MsgBox "Hi " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    
    
    'Fix the Total Calculation
    intLastCol = FindLastCol(3, intLastRow)
    
    intFirstRow = FindFirstRowReversed(1) '29
    
    
    
    'Expand the whole block first
    Rows(intFirstRow & ":" & intLastRow).Select
    Selection.EntireRow.Hidden = False
    
    intFirstCol = 3
    
    'Hide those genuine empty rows
    For intCounter = intFirstRow + 1 To intLastRow - 1
        Cells(intCounter, intLastCol + 1).FormulaArray = "=Sum(abs(" & colLtr(intFirstCol) & intCounter & ":" & colLtr(intLastCol) & intCounter & "))"
        If Cells(intCounter, intLastCol + 1).Value = 0 Then
            Rows(intCounter).Select
            Selection.EntireRow.Hidden = True
        End If
        Cells(intCounter, intLastCol + 1).Formula = ""
    Next intCounter
    
    
    For intCounter = 3 To intLastCol
        Cells(intLastRow, intCounter).Formula = "=sum(" & colLtr(intCounter) & intFirstRow + 1 & ":" & colLtr(intCounter) & intLastRow - 1 & ")"
    Next intCounter
    


    intLastCountryRow = FindLastRow(2, intLastRowConst) '130
    intFirstCountryRow = FindFirstRowReversed(2) '48

    'Generate CTSD Summary
    
    strFundCode = Cells(FindCountryRow("Account"), 2).Value
    
    intFirstRow = intLastRow + 3 '134
    
    intFirstCol = 2
    arrBuckets = Array("CTSD", "<3y", "3-5y", "5-7y", "7-10y", "10-15y", ">15y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    
    intFirstRow = intFirstRow + 1
    intFirstCol = 3
    intSourceCol = 6
    
    For intCounter = 1 To UBound(arrBuckets) - 1
                
        Cells(intFirstRow, intFirstCol).Formula = "=" & Cells(intLastRow, intSourceCol).Address
        intFirstCol = intFirstCol + 1
        intSourceCol = intSourceCol + 4
    Next intCounter
    
    'Total Summation
    Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-6]:RC[-1])"
    
    intFirstRow = intFirstRow + 2
    intFirstCol = 4
       
    arrBuckets = Array("5y", "", "10y", "", "30y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    intFirstCol = 4
    intFirstRow = intFirstRow + 1


    For intCounter = 1 To UBound(arrBuckets) - 1

        If intCounter = 4 Then
            'Formula for Total
            intFirstCol = intFirstCol - 1
            Cells(intFirstRow, intFirstCol).Formula = "=SUM(RC[-6]:RC[-1])"
        Else
            'Combining 2 year group weights
            Cells(intFirstRow, intFirstCol).Formula = "=R[-3]C[-1]+R[-3]C"
            intFirstCol = intFirstCol + 1
        End If
        intFirstCol = intFirstCol + 1

    Next intCounter
    
    
    
    intFirstRow = intFirstRow + 2
    intFirstCol = 3
    arrBuckets = Array("<3y", "'3-5y", "'5-7y", "'7-10y", "'10-15y", ">15y", "Total")
    Call CreateHeaderRow4(intFirstCol, intFirstRow, arrBuckets)
    
    intFirstRow = intFirstRow + 1
    intFirstCol = 2
    
    'Copy Country Block
    Call CopyBlock("B" & intFirstCountryRow & ":B" & intLastCountryRow, "B" & intFirstRow, "Y")
    
    intCountryCount = Selection.Rows.Count '14
    
    intFirstCountryRow = intFirstRow '141
    intLastCountryRow = FindLastRow(2, intLastRowConst) '154
    intLastRow = intLastCountryRow + 1 '155
    
    Call MapDurationCountry(intCountryCount, intFirstCountryRow, 6, 3, 4)
    
    Call ManualIndexPortOverride(intFirstCountryRow, strWSName, strFundCode)
    
    'Add macro button programatically
'    ActiveSheet.Buttons.Delete
'    ActiveSheet.Buttons.Add(600, 350, 200, 50).Select
'    ActiveSheet.Buttons.Caption = "Refresh Adjustments"
'    Selection.OnAction = "'" & strMacroFileName & "'!TriggerManualIndexPortOverride"
    
    
    '** To clear the stray codes (added after changes due to YTW processing)
    For intCounter = intFirstCountryRow To intLastCountryRow
        Cells(intCounter, 10).Value = ""
        Cells(intCounter, 11).Value = ""
        Cells(intCounter, 12).Value = ""
    Next intCounter
    
    
    
    If intGoodFile = 1 Then
        MsgBox "Hi " & strUserName & ", I cannot find the Index Portfolio Override template for this fund.  Please update " & strMacroFileName & " file."
        intGoodFile = 0
        Exit Sub
    End If
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With

    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName

End Sub






Sub TriggerManualIndexPortOverride()
Dim intFirstCountryRow As Integer
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim strWSName As String
Dim intCounter As Integer
Dim strFormula As String
Dim intCountryCount As Integer

'Coming to this step would mean that the form was previously processed
    strWSName = "DurbuckCTDOV_Index Exposure"
    intFirstCountryRow = FindLastRow(2, intLastRowConst)
    intLastRow = intFirstCountryRow
    
    'Need to do this 5 times to get first country row
    For intCounter = 1 To 5
        intFirstCountryRow = FindFirstRowReversed(2)
        If intCounter = 3 Then
            intFirstRow = intFirstCountryRow
        End If
    Next intCounter
    
    'Remove the old table block
    Range("B" & intLastRow + 1 & ":G" & intLastRow + 1).Copy Range("B" & intFirstRow & ":G" & intLastRow)
    
    'Remove the formula modifications for China and HK
    'Need to clear this 7 times for each country
    For intCountryCount = 1 To 2
        For intCounter = 1 To 7
            Cells(intFirstCountryRow, 2 + intCounter).Select
            If InStr(ActiveCell.Formula, "-") > 0 Then
                ActiveCell.Formula = Left(ActiveCell.Formula, Application.WorksheetFunction.Min(InStr(ActiveCell.Formula, "-") - 1, InStr(ActiveCell.Formula, "+") - 1))
            End If
        Next intCounter
        intFirstCountryRow = intFirstCountryRow + 1
    Next intCountryCount
    
    'Reset intFirstCountryRow
    intFirstCountryRow = FindFirstRowReversed(2) + 1
    Call ManualIndexPortOverride(intFirstCountryRow, strWSName)
End Sub


Sub ManualSectorReportOverride(strWSName As String)
Dim intLastCol As Integer
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intLastCountryRow As Integer
Dim intChinaRow As Integer
Dim intAdjRow As Integer
Dim intSectorRow As Integer
Dim i As Integer
Dim j As Integer


    intLastCountryRow = FindCountryRow("OIL_GAS Subtotal")
    intSectorRow = FindLastRow(1, intLastCountryRow)
    
    'Copy Oil & Gas Block
    Call CopyBlock("A" & intSectorRow & ":Q" & intLastCountryRow, "S" & intSectorRow, "Y")

    'Copy Index and Portfolio Overrides from Macro Workbook's Adj_SectorReport
    Application.Workbooks(strMacroFileName).Activate
    Worksheets("Adj_SectorReport").Activate
    
    'Copy Index Block
    Cells(1, 1).Select
    intLastCol = 17
    intLastRow = 3
    
    Range("A1:" & colLtr(intLastCol) & intLastRow).Select
    
    Selection.Copy
    
    Application.Workbooks(strPTFileName).Activate
    Worksheets(strWSName).Activate
    
    intFirstRow = intSectorRow - 4
    Cells(intFirstRow, 19).Value = "Manual adjustments for China from Quasi Sov into Oil and Gas"
    intFirstRow = intFirstRow + 1
    
    
    Cells(intFirstRow, 19).Select
    ActiveSheet.Paste
    
    intAdjRow = ActiveCell.Row + 2
    
    
    For i = 1 To (intLastCountryRow - intSectorRow) + 1
        If Cells(intSectorRow + i, 20).Value = "CN" Then
            intChinaRow = intSectorRow + i
            Cells(intChinaRow, 20).Select
            'Add Adjustment into Oil and Gas
            For j = 1 To 15
                Cells(intChinaRow, 20 + j).Formula = "=" & Cells(intChinaRow, 20 + j).Value & "+" & Cells(intAdjRow, 20 + j).Address
                Cells(intLastCountryRow, 20 + j).Formula = "=sum(" & colLtr(20 + j) & intSectorRow + 1 & ":" & colLtr(20 + j) & intLastCountryRow - 1 & ")"
            Next j
        End If
    Next i
    intLastRow = FindLastRow(20, intLastRowConst)
    
    
    
    intLastCountryRow = FindCountryRow("QUASI_SOV Subtotal")
    intSectorRow = FindLastRow(1, intLastCountryRow)
    
    'Copy Quasi Sov
    Call CopyBlock("A" & intSectorRow & ":Q" & intLastCountryRow, "S" & intSectorRow, "Y")

    'Remove adjustment from Quasi Sov
    For i = 1 To (intLastCountryRow - intSectorRow) + 1
        If Cells(intSectorRow + i, 20).Value = "CN" Then
            intChinaRow = intSectorRow + i
            Cells(intChinaRow, 20).Select
            'Add Adjustment into Oil and Gas
            For j = 1 To 15
                Cells(intChinaRow, 20 + j).Formula = "=" & Cells(intChinaRow, 20 + j).Value & "-" & Cells(intAdjRow, 20 + j).Address
                Cells(intLastCountryRow, 20 + j).Formula = "=sum(" & colLtr(20 + j) & intSectorRow + 1 & ":" & colLtr(20 + j) & intLastCountryRow - 1 & ")"
            Next j
        End If
    Next i
    
End Sub



Sub ManualIndexPortOverride(intFirstCountryRow As Integer, strWSName As String, strFundCode As String)
Dim intLastCol As Integer
Dim intLastRow As Integer
Dim intFirstRow As Integer
Dim intIndexTotalRow As Integer
Dim intChinaRow As Integer
Dim intHKRow As Integer
Dim intFundBlockRow As Integer
Dim intCounter As Integer
Dim dblFieldRetrieve As Double

    'Copy Index and Portfolio Overrides from Macro Workbook's Adj_CTDOVIdxExp
    Application.Workbooks(strMacroFileName).Activate
    Worksheets("Adj_CTDOVIdxExp").Activate
    
    'Copy Index Block
    intFundBlockRow = FindCountryRow(strFundCode & " start") + 1
    
    If intGoodFile = 1 Then
        Exit Sub
    End If
    Cells(intFundBlockRow, 1).Select
    intLastCol = FindLastCol(1, intFundBlockRow)
    'intLastRow = FindLastRow(intLastCol, intLastRowConst)
    intLastRow = FindCountryRow(strFundCode & " end") - 1
    
    Range("A" & intFundBlockRow & ":" & colLtr(intLastCol) & intLastRow).Select
    
    Selection.Copy
    
    Application.Workbooks(strPTFileName).Activate
    Worksheets(strWSName).Activate
    
    'To cater for remaps, changing column for checking last row to 9 (I)
    intLastRow = FindLastRow(9, intLastRowConst)
    intFirstRow = intLastRow + 2
    
    Cells(intFirstRow, 2).Value = "Manual adjustments HK into China"
    intFirstRow = intFirstRow + 1
    
    Cells(intFirstRow, 2).Select
    'Pasting Index
    ActiveSheet.Paste
    intLastRow = FindLastRow(2, intLastRowConst) '163
    intLastCol = FindLastCol(2, intLastRow) '7
    
    'Label Sum MV% and YTW
    Cells(intFirstRow, intLastCol + 1).Value = "Sum MV%"
    Cells(intFirstRow, intLastCol + 2).Value = "Sum YTW"
    Cells(intFirstRow, intLastCol + 3).Value = "CTSD Check"
    
    For intCounter = intFirstRow + 1 To intLastRow - 1 '160 to 162
        'Go to Issuer Report, identify HK rows, pick up MV% and YTW for the selected securities
        'Retrieval of MV% of various indices
        dblFieldRetrieve = OVFieldRetrieve("Issuer_Report", Cells(intCounter, 2).Value, "Hong Kong Subtotal", 2, 3)
        Worksheets(strWSName).Activate
        Cells(intCounter, intLastCol + 1).Value = dblFieldRetrieve
        
        'Retrieval of YTW of various indices
        dblFieldRetrieve = OVFieldRetrieve("Issuer_Report", Cells(intCounter, 2).Value, "Hong Kong Subtotal", 2, 9)
        Worksheets(strWSName).Activate
        Cells(intCounter, intLastCol + 2).Value = dblFieldRetrieve
        
        
        'Retrieval of CTSD of various indices
        dblFieldRetrieve = OVFieldRetrieve("Issuer_Report", Cells(intCounter, 2).Value, "Hong Kong Subtotal", 2, 18)
        Worksheets(strWSName).Activate
        Cells(intCounter, intLastCol + 3).Value = dblFieldRetrieve
    Next intCounter
    
    'Update Total Row
    Cells(intLastRow, intLastCol + 1).Formula = "=sum(" & colLtr(intLastCol + 1) & intFirstRow + 1 & ":" & colLtr(intLastCol + 1) & intLastRow - 1 & ")"
    Cells(intLastRow, intLastCol + 2).Formula = "=sum(" & colLtr(intLastCol + 2) & intFirstRow + 1 & ":" & colLtr(intLastCol + 2) & intLastRow - 1 & ")"
    Cells(intLastRow, intLastCol + 3).Formula = "=sum(" & colLtr(intLastCol + 3) & intFirstRow + 1 & ":" & colLtr(intLastCol + 3) & intLastRow - 1 & ")"
    
    intChinaRow = FindCountryRowInstance("China", 2)
    intHKRow = FindCountryRowInstance("Hong Kong", 2)
    
    'Reducing the index weights from the China (first row) above
    'Reducing weight from Dur <=3 from 2y Total from China to HK
    Call ManualCountryWeightDecrease(intChinaRow, intLastRow, 3, 3)
    Call ManualCountryWeightIncrease(intHKRow, intLastRow, 3, 3)
    
    'Reducing weight from Dur 3-5 from 5y Total from China to HK
    Call ManualCountryWeightDecrease(intChinaRow, intLastRow, 4, 4)
    Call ManualCountryWeightIncrease(intHKRow, intLastRow, 4, 4)
    
    'Reducing weight from Dur 7-10 from 10y Total from China to HK
    Call ManualCountryWeightDecrease(intChinaRow, intLastRow, 6, 5)
    Call ManualCountryWeightIncrease(intHKRow, intLastRow, 6, 5)
    
    'Reducing weight from Dur 15+ from 30y Total from China to HK
    Call ManualCountryWeightDecrease(intChinaRow, intLastRow, 8, 6)
    Call ManualCountryWeightIncrease(intHKRow, intLastRow, 8, 6)
    
    'Reducing weight from Total MV% from China to HK
    Call ManualCountryWeightDecrease(intChinaRow, intLastRow, 10, 8)
    Call ManualCountryWeightIncrease(intHKRow, intLastRow, 10, 8)
    
    'Reducing weight from Total YTW from China to HK
    Call ManualCountryWeightDecrease(intChinaRow, intLastRow, 11, 9)
    Call ManualCountryWeightIncrease(intHKRow, intLastRow, 11, 9)
    
    'Reducing weight from CTSD Check from China to HK
    Call ManualCountryWeightDecrease(intChinaRow, intLastRow, 12, 10)
    Call ManualCountryWeightIncrease(intHKRow, intLastRow, 12, 10)
    
    
    intIndexTotalRow = intLastRow
    
    'Copy Portfolio block
    Application.Workbooks(strMacroFileName).Activate
    Worksheets("Adj_CTDOVIdxExp").Activate
    
    Cells(intFundBlockRow, 8).Select
    intLastCol = FindLastCol(8, intFundBlockRow)
    'intLastRow = FindLastRow(intLastCol, intLastRowConst)
    intLastRow = FindCountryRow(strFundCode & " end") - 1
    
    Range("H" & intFundBlockRow & ":" & colLtr(intLastCol) & intLastRow).Select
    
    Selection.Copy
    
    Application.Workbooks(strPTFileName).Activate
    Worksheets(strWSName).Activate
    
    intLastRow = FindLastRow(2, intLastRowConst)
    intFirstRow = intLastRow + 2
    
    Cells(intFirstRow, 2).Select
    ActiveSheet.Paste
    intLastRow = FindLastRow(2, intLastRowConst)
    intLastCol = FindLastCol(2, intLastRow)
    
    'Label Sum MV% and YTW
    Cells(intFirstRow, intLastCol + 1).Value = "Sum MV%"
    Cells(intFirstRow, intLastCol + 2).Value = "Sum YTW"
    Cells(intFirstRow, intLastCol + 3).Value = "Sum CTSD"
    
    For intCounter = intFirstRow + 1 To intLastRow - 1 '166 to 167
        'Go to Issuer Report, identify HK rows, pick up MV% and YTW for the selected securities
        'Retrieval of MV% of various portfolio
        dblFieldRetrieve = OVFieldRetrieve("Issuer_Report", Cells(intCounter, 2).Value, "Hong Kong Subtotal", 2, 4)
        Worksheets(strWSName).Activate
        Cells(intCounter, intLastCol + 1).Value = dblFieldRetrieve
        
        'Retrieval of YTW of various portfolio
        dblFieldRetrieve = OVFieldRetrieve("Issuer_Report", Cells(intCounter, 2).Value, "Hong Kong Subtotal", 2, 10)
        Worksheets(strWSName).Activate
        Cells(intCounter, intLastCol + 2).Value = dblFieldRetrieve
        
        
        'Retrieval of CTSD of various indices
        dblFieldRetrieve = OVFieldRetrieve("Issuer_Report", Cells(intCounter, 2).Value, "Hong Kong Subtotal", 2, 19)
        Worksheets(strWSName).Activate
        Cells(intCounter, intLastCol + 3).Value = dblFieldRetrieve
    Next intCounter
    
    'Update Total Row
    Cells(intLastRow, intLastCol + 1).Formula = "=sum(" & colLtr(intLastCol + 1) & intFirstRow + 1 & ":" & colLtr(intLastCol + 1) & intLastRow - 1 & ")"
    Cells(intLastRow, intLastCol + 2).Formula = "=sum(" & colLtr(intLastCol + 2) & intFirstRow + 1 & ":" & colLtr(intLastCol + 2) & intLastRow - 1 & ")"
    Cells(intLastRow, intLastCol + 3).Formula = "=sum(" & colLtr(intLastCol + 3) & intFirstRow + 1 & ":" & colLtr(intLastCol + 3) & intLastRow - 1 & ")"
    
    
    'Increase the portfolio weights from the China (first row) above
    'Increasing weight from Dur <=3 from 2y Total to China from HK
    Call ManualCountryWeightIncrease(intChinaRow, intLastRow, 3, 3)
    Call ManualCountryWeightDecrease(intHKRow, intLastRow, 3, 3)
    
    'Increasing weight from Dur 3-5 from 5y Total to China from HK
    Call ManualCountryWeightIncrease(intChinaRow, intLastRow, 4, 4)
    Call ManualCountryWeightDecrease(intHKRow, intLastRow, 4, 4)
    
    'Increasing weight from Dur 7-10 from 10y Total to China from HK
    Call ManualCountryWeightIncrease(intChinaRow, intLastRow, 6, 5)
    Call ManualCountryWeightDecrease(intHKRow, intLastRow, 6, 5)
    
    'Increasing weight from Dur 15+ from 30y Total to China from HK
    Call ManualCountryWeightIncrease(intChinaRow, intLastRow, 8, 6)
    Call ManualCountryWeightDecrease(intHKRow, intLastRow, 8, 6)
    
    
    'Increasing weight from Total MV% to China from HK
    Call ManualCountryWeightIncrease(intChinaRow, intLastRow, 10, 8)
    Call ManualCountryWeightDecrease(intHKRow, intLastRow, 10, 8)
    
    'Increasing weight from Total YTW to China from HK
    Call ManualCountryWeightIncrease(intChinaRow, intLastRow, 11, 9)
    Call ManualCountryWeightDecrease(intHKRow, intLastRow, 11, 9)
    
    
    'Increasing weight from CTSD Check to China from HK
    Call ManualCountryWeightIncrease(intChinaRow, intLastRow, 12, 10)
    Call ManualCountryWeightDecrease(intHKRow, intLastRow, 12, 10)
    
End Sub


Sub ManualCountryWeightDecrease(intFirstCountryRow As Integer, intLastRow As Integer, intSourceCol As Integer, intTargetCol As Integer)
    Cells(intFirstCountryRow, intSourceCol).Formula = Cells(intFirstCountryRow, intSourceCol).Formula & "-" & Cells(intLastRow, intTargetCol).Address
End Sub

Sub ManualCountryWeightIncrease(intFirstCountryRow As Integer, intLastRow As Integer, intSourceCol As Integer, intTargetCol As Integer)
    Cells(intFirstCountryRow, intSourceCol).Formula = Cells(intFirstCountryRow, intSourceCol).Formula & "+" & Cells(intLastRow, intTargetCol).Address
End Sub

Function OVFieldRetrieve(strWSName As String, strKey As String, strOV As String, intSourceCol As Integer, intTargetCol As Integer) As Double
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intCounter As Integer

Worksheets(strWSName).Activate
intLastRow = FindCountryRow(strOV) '240
intFirstRow = FindFirstRowReversed(1) '186
OVFieldRetrieve = 0

For intCounter = intFirstRow To intLastRow
    If Cells(intCounter, intSourceCol).Value = strKey Then
        OVFieldRetrieve = Cells(intCounter, intTargetCol).Value
        Exit Function
    End If
Next intCounter

End Function

Sub ProcessDBCTDOVSecIndexExp()
Dim strWSName As String
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intFirstCountryRow As Integer
Dim intLastCountryRow As Integer
Dim intCountryCount As Integer
Dim arrBuckets As Variant
Dim intLastCol As Integer
Dim strColLetter As String
Dim intColCount As Integer

    strWSName = "DurbuckCTDOVSec_Index Exposure"

    If VerifyColumns(strWSName) > 0 Then
        MsgBox "I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If

    Application.Workbooks(strMacroFileName).Activate
    Worksheets("Verification").Activate

    'Using verification range data
    intLastCol = Cells(4, 4).Value
    
    Application.Workbooks(strPTFileName).Activate
    Worksheets(strWSName).Activate
    
    'Remove column + next 3 column where column C value is -
    For intColCount = 1 To intLastCol
        If Cells(28, intColCount).Value = "-" Then
            Cells.MergeCells = False
            Range(Columns(intColCount), Columns(intColCount + 3)).Select
            Selection.Delete Shift:=xlToLeft
        End If
    Next intColCount
    
    
    intLastRow = FindLastRow(1, intLastRowConst)
    intFirstRow = intLastRow + 4
    
    intLastCountryRow = FindLastRow(2, intLastRowConst)
    intFirstCountryRow = FindFirstRowReversed(2)
    
    
    'Check whether processing was previously done
    If Cells(intFirstRow, 3).Value <> "" Then
        MsgBox "Hi, " & strUserName & ", " & strWSName & " was previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    
    'Copy Country Block
    Call CopyBlock("B" & intFirstCountryRow & ":B" & intLastCountryRow, "B" & intFirstRow, "Y")
    
    intCountryCount = Selection.Rows.Count
    
    intFirstCountryRow = intFirstRow '137
    intFirstRow = intFirstRow - 1 '136
    intLastCountryRow = FindLastRow(2, intLastRowConst) '151
    intLastRow = intLastCountryRow + 1 '152
    
    
    arrBuckets = Array("<3", "'3-5", "'5-7", "'7-10", "'10-15", ">15", "Total")
    Call CreateHeaderRow3(3, intFirstRow, arrBuckets, 6)
    
    intFirstRow = intFirstRow + 1

    Call MapCorpQuasiSov(intFirstRow, 6, intCountryCount)
        
    Cells(intLastRow, 2).Select
    ActiveCell.FormulaR1C1 = "Total"
    
    'Map Total Row
    Call MapCorpQuasiSov(ActiveCell.Row, 6, 1)
    
    'Create Total Columns
    intLastRow = FindLastRow(3, intLastRowConst)
    intFirstRow = FindFirstRowReversed(ActiveCell.Column)
    intLastCol = FindLastCol(ActiveCell.Column, ActiveCell.Row)
    
    
    Cells(intFirstRow, intLastCol + 1).Select
    ActiveCell.FormulaR1C1 = "Total"
    intFirstRow = intFirstRow + 1
    Cells(intFirstRow, ActiveCell.Column).Select
    ActiveCell.FormulaR1C1 = "=RC[-21]+RC[-17]+RC[-13]+RC[-9]+RC[-5]+RC[-1]"
    
    strColLetter = colLtr(ActiveCell.Column)
    With ActiveSheet.Range(strColLetter & intFirstRow)
        .AutoFill Destination:=Range(strColLetter & intFirstRow & ":" & strColLetter & intLastRow)
    End With
    
    
    'Copy Country Block
    intLastRow = intLastRow + 4
    Call CopyBlock("B" & intFirstCountryRow & ":B" & intLastCountryRow + 1, "B" & intLastRow, "Y")
    
    intFirstRow = intLastRow - 1
    
    arrBuckets = Array("5y", "10y", "30y", "Total")
    
    Call CreateHeaderRow3(3, intFirstRow, arrBuckets, 4)
    
    intFirstRow = intFirstRow + 1
    Call MapCorpQuasiSov2(intFirstRow, 4, intCountryCount + 1, intFirstCountryRow)
    
    
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName
End Sub

Function colLtr(intCol As Integer)
    colLtr = Left(Cells(1, intCol).Address(1, 0), InStr(1, Cells(1, intCol).Address(1, 0), "$") - 1)
End Function


Sub MapCorpQuasiSov2(intRow As Integer, intRepeat As Integer, intCountryCount As Integer, intFirstCountryRow As Integer)
Dim intColCounter As Integer
Dim intRepeatCounter As Integer
Dim intRowCountry As Integer
Dim intCountryCounter As Integer
Dim intSourceCol As Integer
Dim intTargetCol As Integer

    
'    Cells(intRow, intTargetCol).Select
    For intCountryCounter = 1 To intCountryCount
        
        intRowCountry = intFirstCountryRow
        intTargetCol = 2
        intSourceCol = 2
        
        For intRepeatCounter = 1 To intRepeat
            For intColCounter = 1 To 4
                If intRepeatCounter = 4 Then
                    'Summing up 5y + 10y + 30y
                    Cells(intRow, intTargetCol + intColCounter).Formula = "=RC[-12]+RC[-8]+RC[-4]"
                Else
                    'Remap from country block above
                    Cells(intRow, intTargetCol + intColCounter).Formula = "=R[" & intRowCountry - ActiveCell.Row - 1 & "]C[" & 4 * (intRepeatCounter - 1) & "]+R[" & intRowCountry - ActiveCell.Row - 1 & "]C[" & 4 * intRepeatCounter & "]"
                End If
                intSourceCol = intSourceCol + 8
            Next intColCounter
            
            intTargetCol = intTargetCol + 4
            
        Next intRepeatCounter
        
        intRow = intRow + 1
        intRowCountry = intRowCountry + 1
        
    Next intCountryCounter
End Sub





Sub MapCorpQuasiSov(intRow As Integer, intRepeat As Integer, intCountryCount As Integer)
Dim intColCounter As Integer
Dim intRepeatCounter As Integer
Dim intRowCountry As Integer
Dim intCountryCounter As Integer
Dim intSourceCol As Integer
Dim intTargetCol As Integer

    
'    Cells(intRow, intTargetCol).Select
    For intCountryCounter = 1 To intCountryCount
        If intCountryCount = 1 Then
            'To handle Total Row situation
            intRowCountry = FindLastRow(1, intLastRowConst)
        Else
            intRowCountry = FindCountryRow(Cells(intRow, 2).Value)
        End If
        
        intTargetCol = 2
        intSourceCol = 6
        
        For intRepeatCounter = 1 To intRepeat
            For intColCounter = 1 To 4
                
                If intColCounter = 4 Then
                    Cells(intRow, intTargetCol + intColCounter).FormulaR1C1 = "=SUM(RC[-3]:RC[-1])"
                    'intSourceCol = intSourceCol + 8
                Else
                    Cells(intRow, intTargetCol + intColCounter).Formula = "=" & Cells(intRowCountry, intSourceCol).Address
                End If
                intSourceCol = intSourceCol + 4
            Next intColCounter
            
            intTargetCol = intTargetCol + 4
            
        Next intRepeatCounter
        
        intRow = intRow + 1
    Next intCountryCounter
End Sub


Sub MapDurationCountry(intCountryCount As Integer, intFirstCountryRow As Integer, intFirstSourceCol As Integer, intFirstTargetCol As Integer, intColGap As Integer)
Dim intCountryCounter As Integer
Dim intRowCountry As Integer
Dim intRow As Integer
Dim intCol As Integer
Dim intSourceCol As Integer
Dim intBucket As Integer

    intRow = intFirstCountryRow
    
    
    
    For intCountryCounter = 1 To intCountryCount
        'intSourceCol = 6
        intSourceCol = intFirstSourceCol
        
        'intCol = 3
        intCol = intFirstTargetCol
        
        intRowCountry = FindCountryRow(Cells(intRow, 2).Value)
        
        For intBucket = 1 To 7
            If intBucket = 7 Then
            'Total Column
                Cells(intRow, intCol).Formula = "=SUM(RC[-6]:RC[-1])"
            Else
                Cells(intRow, intCol).Formula = "=" & Cells(intRowCountry, intSourceCol).Address
                intCol = intCol + 1
                'intSourceCol = intSourceCol + 4
                intSourceCol = intSourceCol + intColGap
            End If
        Next intBucket
        
        intRow = intRow + 1

    Next intCountryCounter
        
      
End Sub



Sub ProcessDBRiskMIndexExp()
Dim strWSName As String
Dim intFirstRow As Integer
Dim intLastRow As Integer
Dim intFirstTotal As Integer
Dim intFirstTablePointer As Integer
Dim intFirstCountryRow As Integer
Dim intLastCountryRow As Integer
Dim strCopyTarget As String
Dim intRowCountry As Integer
Dim intCountryCount As Integer
Dim intCounter As Integer
Dim intColCounter As Integer
Dim intColPointer As Integer
Dim intColCounterStart As Integer
Dim intColCounterEnd As Integer

    strWSName = "DurbuckRiskM_Index Exposure"
    
    If VerifyColumns(strWSName) > 0 Then
        MsgBox "Hi, " & strUserName & ", I found column discrepancies in " & strWSName & " and will skip and move on to the next available worksheet"
        Exit Sub
    End If

    Worksheets(strWSName).Activate
    
    
    intLastRow = FindLastRow(1, intLastRowConst)
    'MsgBox intLastRow


    intLastCountryRow = FindLastRow(2, intLastRowConst)
    intFirstCountryRow = FindFirstRowReversed(2)

    'Create 5, 10 and 30 year weights table
    intFirstRow = intLastRow + 3
    
    'Check whether processing was previously done
    If Cells(intFirstRow, 3).Value <> "" Then
        MsgBox strWSName & " previously processed, skipping to the next available worksheet"
        Exit Sub
    End If
    
    Call CreateHeaderRow(3, intFirstRow, 1)
    
    '5y row
    intFirstRow = intFirstRow + 1
    intFirstTablePointer = intFirstRow
    
    Cells(intFirstRow, 2).Select
    ActiveCell.FormulaR1C1 = "5y"
    
    Cells(intFirstRow, 3).Select
    ActiveCell.Formula = "=K" & intLastRow & "+W" & intLastRow
    
    strCopyTarget = Cells(intFirstRow, 4).Address & ":" & Cells(intFirstRow, 6).Address
    Call CopyBlock(ActiveCell.Address, strCopyTarget, "N")
        
    
    '10y row
    intFirstRow = intFirstRow + 1
    Cells(intFirstRow, 2).Select
    ActiveCell.FormulaR1C1 = "10y"
    
    Cells(intFirstRow, 3).Select
    ActiveCell.Formula = "=AI" & intLastRow & "+AU" & intLastRow
    
    
    strCopyTarget = Cells(intFirstRow, 4).Address & ":" & Cells(intFirstRow, 6).Address
    Call CopyBlock(ActiveCell.Address, strCopyTarget, "N")
    
   
    
    '30y row
    intFirstRow = intFirstRow + 1
    Cells(intFirstRow, 2).Select
    ActiveCell.FormulaR1C1 = "30y"
    
    Cells(intFirstRow, 3).Select
    ActiveCell.Formula = "=BG" & intLastRow & "+BS" & intLastRow
    
    strCopyTarget = Cells(intFirstRow, 4).Address & ":" & Cells(intFirstRow, 6).Address
    Call CopyBlock(ActiveCell.Address, strCopyTarget, "N")
    
    
    
    'Total row
    intFirstRow = intFirstRow + 1
    Cells(intFirstRow, 2).Select
    ActiveCell.FormulaR1C1 = "Total"
    
    'Range("D138:F138").Select
    Range(Cells(intFirstRow, 3), Cells(intFirstRow, 6)).Select
    Selection.FormulaR1C1 = "=SUM(R[-3]C:R[-1]C)"
    
    intFirstTotal = intFirstRow
    
    
    
    'Create 5, 10 and 30 year % risk table
    intFirstRow = intFirstRow + 2
    
    Call CreateHeaderRow(3, intFirstRow, 1)
    
    '5y row
    intFirstRow = intFirstRow + 1
    Cells(intFirstRow, 2).Select
    ActiveCell.FormulaR1C1 = "5y"
    
    Call PercentRiskTableDetails(intFirstRow, intFirstTablePointer, intFirstTotal)
    
    
    '10y row
    intFirstRow = intFirstRow + 1
    intFirstTablePointer = intFirstTablePointer + 1
    
    Cells(intFirstRow, 2).Select
    ActiveCell.FormulaR1C1 = "10y"
    
    Call PercentRiskTableDetails(intFirstRow, intFirstTablePointer, intFirstTotal)
    
    
    '30y row
    intFirstRow = intFirstRow + 1
    intFirstTablePointer = intFirstTablePointer + 1
    
    Cells(intFirstRow, 2).Select
    ActiveCell.FormulaR1C1 = "30y"
    
    Call PercentRiskTableDetails(intFirstRow, intFirstTablePointer, intFirstTotal)
    
    
    'Total row
    intFirstRow = intFirstRow + 1
    Cells(intFirstRow, 2).Select
    ActiveCell.FormulaR1C1 = "Total"
    
    'Range("D138:F138").Select
    Range(Cells(intFirstRow, 3), Cells(intFirstRow, 6)).Select
    Selection.FormulaR1C1 = "=SUM(R[-3]C:R[-1]C)"
    
    
    'Create 5, 10, 30 year Total Country table
    intFirstRow = intFirstRow + 2
    
    'Year row
    Cells(intFirstRow, 3).Select
    ActiveCell.FormulaR1C1 = "5y"
    
    Cells(intFirstRow, 7).Select
    ActiveCell.FormulaR1C1 = "10y"
    
    Cells(intFirstRow, 11).Select
    ActiveCell.FormulaR1C1 = "30y"
    
    Cells(intFirstRow, 15).Select
    ActiveCell.FormulaR1C1 = "Total"
    
    'Column Header row
    intFirstRow = intFirstRow + 1
    
    Call CreateHeaderRow(3, intFirstRow, 4)
    
    
    
    intFirstRow = FindLastRow(3, intLastRowConst) + 1
    
    
    'intFirstCountryRow = intFirstRow

    
    'Copy Country Block
    'Call CopyBlock("B48:B130", "B148", "Y")
    Call CopyBlock("B" & intFirstCountryRow & ":B" & intLastCountryRow, "B" & intFirstRow, "Y")
    
    'intFirstCountryRow = intFirstRow
    intCountryCount = Selection.Rows.Count
    
    intRowCountry = FindCountryRow(ActiveCell.Value)
        
    
    For intCounter = 1 To intCountryCount
        Call CopyDetailsCountry(intFirstRow, intRowCountry)
        intFirstRow = intFirstRow + 1
        Cells(intFirstRow, 2).Select
        intRowCountry = FindCountryRow(ActiveCell.Value)
    Next intCounter
    
    
    intLastCountryRow = FindLastRow(2, intLastRowConst)
    intFirstCountryRow = FindFirstRowReversed(2)
    
    'Create Total Row
    intLastRow = FindLastRow(2, intLastRowConst) + 1
    Cells(intLastRow, 2).Select
    ActiveCell.FormulaR1C1 = "Total"
    
    Call CopyDetailsCountry(intLastRow, 131)
 
    'YTW, WTD OAS, DTS and CTSD block
    intFirstRow = intLastRow + 2
    
    Cells(intFirstRow, 3).Select
    ActiveCell.FormulaR1C1 = "YTW"
    
    Cells(intFirstRow, 7).Select
    ActiveCell.FormulaR1C1 = "Wtd OAS"
    
    Cells(intFirstRow, 11).Select
    ActiveCell.FormulaR1C1 = "DTS"
    
    Cells(intFirstRow, 15).Select
    ActiveCell.FormulaR1C1 = "CTSD"
    
    intFirstRow = intFirstRow + 1
    Call CreateHeaderRow2(3, intFirstRow, 4)
    
    'Copy Country Block
    'Call CopyBlock("B148:B163", "B167", "N")
    intFirstRow = intFirstRow + 1
    Call CopyBlock("B" & intFirstCountryRow & ":B" & intLastCountryRow, "B" & intFirstRow, "Y")
    intLastRow = FindLastRow(2, intLastRowConst) + 1
    Cells(intLastRow, 2).Select
    ActiveCell.FormulaR1C1 = "Total"
    
    'intRowCountry = intFirstRow
 
     
    
    'YTW Block
    intColPointer = 3
    intColCounterStart = 1
    intColCounterEnd = 4
    intRowCountry = intFirstCountryRow
    intLastRow = FindLastRow(intColPointer, intLastRowConst) + 1
    Call RemapRiskMeasures(intRowCountry, intLastRow, intCountryCount, intColPointer, intColCounterStart, intColCounterEnd)
    
    
    'Wtd OAS Block
    intRowCountry = intFirstCountryRow
    'intLastRow = FindLastRow(3, intLastRowConst) + 1
    intColPointer = intColPointer + 1
    intColCounterStart = intColCounterStart + 4
    intColCounterEnd = intColCounterEnd + 4
    intRowCountry = intFirstCountryRow
    intLastRow = intLastCountryRow + 5
    Call RemapRiskMeasures(intRowCountry, intLastRow, intCountryCount, intColPointer, intColCounterStart, intColCounterEnd)
    
    
    'DTS Block
    intRowCountry = intFirstCountryRow
    intColPointer = intColPointer + 1
    intColCounterStart = intColCounterStart + 4
    intColCounterEnd = intColCounterEnd + 4
    intRowCountry = intFirstCountryRow
    intLastRow = intLastCountryRow + 5
    Call RemapRiskMeasures(intRowCountry, intLastRow, intCountryCount, intColPointer, intColCounterStart, intColCounterEnd)
    
    
    'CTSD Block
    intRowCountry = intFirstCountryRow
    intColPointer = intColPointer + 1
    intColCounterStart = intColCounterStart + 4
    intColCounterEnd = intColCounterEnd + 4
    intRowCountry = intFirstCountryRow
    intLastRow = intLastCountryRow + 5
    Call RemapRiskMeasures(intRowCountry, intLastRow, intCountryCount, intColPointer, intColCounterStart, intColCounterEnd)
  
    With Worksheets(strWSName).Tab
        .Color = 12611584 'Blue
        '.Color = xlAutomatic
        .TintAndShade = 0
    End With
    
    strProcessedSheets = strProcessedSheets + vbCrLf + strWSName
End Sub

Sub RemapRiskMeasures(intRowCountry As Integer, intLastRow As Integer, intCountryCount As Integer, intColPointer As Integer, intColCounterStart As Integer, intColCounterEnd As Integer)
Dim intCounter As Integer
Dim intColCounter As Integer
Dim intColPointerTemp As Integer

    intColPointerTemp = intColPointer
    For intCounter = 1 To intCountryCount + 1
        For intColCounter = intColCounterStart To intColCounterEnd
            Cells(intLastRow, 2 + intColCounter).Formula = "=" & Cells(intRowCountry, intColPointerTemp).Address
            intColPointerTemp = intColPointerTemp + 4
        Next intColCounter
        intColPointerTemp = intColPointer
        intRowCountry = intRowCountry + 1
        intLastRow = intLastRow + 1
    Next intCounter
End Sub


Function FindCountryRow(strCountry As String)
On Error GoTo errHandler
    Range("A1").Select
    Cells.Find(What:=strCountry, After:=ActiveCell, LookIn:=xlFormulas, LookAt _
        :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
        False, SearchFormat:=False).Activate
    FindCountryRow = ActiveCell.Row
    Exit Function
errHandler:
If Err.Number = 91 Then
    MsgBox "Oops, sorry " & strUserName & " I can't find " & strCountry
    intGoodFile = 1
End If
End Function

Function FindCountryRowInstance(strCountry As String, intInstance As Integer)
Dim i As Integer

    Range("A1").Select
    Cells.Find(What:=strCountry, After:=ActiveCell, LookIn:=xlFormulas, LookAt _
        :=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
        False, SearchFormat:=False).Activate
            
    For i = 2 To intInstance
        Cells.FindNext(After:=ActiveCell).Activate
    Next i
    FindCountryRowInstance = ActiveCell.Row
End Function

Function FindCountryRowInCol(strCountry As String)
    Range("A1").Select
    Cells.Find(What:=strCountry, After:=ActiveCell, LookIn:=xlFormulas, LookAt _
        :=xlPart, SearchOrder:=xlByColumns, SearchDirection:=xlNext, MatchCase:= _
        False, SearchFormat:=False).Activate
    FindCountryRowInCol = ActiveCell.Row
End Function

Function FindExactMatchRow(strKey As String)
    Cells.Find(What:=strKey, After:=ActiveCell, LookIn:=xlFormulas, LookAt _
        :=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
        False, SearchFormat:=False).Activate
    FindExactMatchRow = ActiveCell.Row
End Function


Sub CopyBlock(strStartRange As String, strTargetAddr As String, strVisible As String)
    
    Range(strStartRange).Select
    
    If strVisible = "Y" Then
        Selection.SpecialCells(xlCellTypeVisible).Select
    End If
    
    Selection.Copy
    Range(strTargetAddr).Select
    ActiveSheet.Paste
    
End Sub


Sub CopyDetails(intFirstRow As Integer, intRowCountry As Integer, intColBlk As Integer, strFirstAddr As String, strSecondAddr As String)
Dim strCopySource As String
Dim strCopyTarget As String

        Cells(intFirstRow, intColBlk).Select
        ActiveCell.Formula = strFirstAddr & intRowCountry & strSecondAddr & intRowCountry
        strCopySource = ActiveCell.Address
        
        strCopyTarget = Cells(intFirstRow, intColBlk + 1).Address & ":" & Cells(intFirstRow, intColBlk + 3).Address
        Call CopyBlock(strCopySource, strCopyTarget, "N")
End Sub


Sub CopyDetailsCountry(intFirstRow As Integer, intRowCountry As Integer)
Dim intColBlk As Integer
Dim strFirstAddr As String
Dim strSecondAddr As String
Dim intColWAYW As Integer
Dim intColWAOAS As Integer
Dim intColWDXOAS As Integer
Dim intColCTSDO As Integer

    intColWAYW = 3
    intColWAOAS = 4
    intColWDXOAS = 5
    intColCTSDO = 6

    '5y Block
    intColBlk = 3
    strFirstAddr = "=K"
    strSecondAddr = "+W"
         
         
    Call CopyDetails(intFirstRow, intRowCountry, intColBlk, strFirstAddr, strSecondAddr)
          
         
    '10y Block
    intColBlk = 7
    strFirstAddr = "=AI"
    strSecondAddr = "+AU"
    
    Call CopyDetails(intFirstRow, intRowCountry, intColBlk, strFirstAddr, strSecondAddr)
    
    
    '30y Block
    intColBlk = 11
    strFirstAddr = "=BG"
    strSecondAddr = "+BS"
    
    Call CopyDetails(intFirstRow, intRowCountry, intColBlk, strFirstAddr, strSecondAddr)
    
    
    
    'Total Block
    intColBlk = 15
    Cells(intFirstRow, intColBlk).Select
    ActiveCell.Formula = "=" & Cells(intFirstRow, intColWAYW).Address & "+" & Cells(intFirstRow, intColWAYW + 4).Address & "+" & Cells(intFirstRow, intColWAYW + 8).Address
    
    Cells(intFirstRow, intColBlk + 1).Select
    ActiveCell.Formula = "=" & Cells(intFirstRow, intColWAOAS).Address & "+" & Cells(intFirstRow, intColWAOAS + 4).Address & "+" & Cells(intFirstRow, intColWAOAS + 8).Address
    
    Cells(intFirstRow, intColBlk + 2).Select
    ActiveCell.Formula = "=" & Cells(intFirstRow, intColWDXOAS).Address & "+" & Cells(intFirstRow, intColWDXOAS + 4).Address & "+" & Cells(intFirstRow, intColWDXOAS + 8).Address
    
    Cells(intFirstRow, intColBlk + 3).Select
    ActiveCell.Formula = "=" & Cells(intFirstRow, intColCTSDO).Address & "+" & Cells(intFirstRow, intColCTSDO + 4).Address & "+" & Cells(intFirstRow, intColCTSDO + 8).Address
    
    
End Sub
    

Sub CreateHeaderRow(intCol As Integer, intRow As Integer, intRepeat As Integer)
Dim i As Integer
    
    For i = 1 To intRepeat
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "WAYW"
        intCol = intCol + 1
        
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "WAOAS"
        intCol = intCol + 1
        
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "WDXOAS"
        intCol = intCol + 1
        
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "CTSD Override"
        intCol = intCol + 1
    Next i
    
End Sub


Sub CreateHeaderRow2(intCol As Integer, intRow As Integer, intRepeat As Integer)
Dim i As Integer
    
    For i = 1 To intRepeat
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "5y"
        intCol = intCol + 1
        
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "10y"
        intCol = intCol + 1
        
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "30y"
        intCol = intCol + 1
        
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "Total"
        intCol = intCol + 1
    Next i
    
End Sub


Sub CreateHeaderRow3(intCol As Integer, intRow As Integer, arrBuckets As Variant, intRepeat As Integer)
Dim i As Integer
    
    For i = 1 To intRepeat
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "Corp"
        intCol = intCol + 1
        
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "Quasi"
        intCol = intCol + 1
        
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = "Sov"
        intCol = intCol + 1
        
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = arrBuckets(i - 1)
        intCol = intCol + 1
    Next i
    
End Sub

Sub CreateHeaderRow4(intCol As Integer, intRow As Integer, arrBuckets As Variant)
Dim i As Integer
    For i = 1 To UBound(arrBuckets) + 1
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = arrBuckets(i - 1)
        intCol = intCol + 1
    Next i
End Sub

Sub CreateColumnArray(intCol As Integer, intRow As Integer, arrBuckets As Variant)
Dim i As Integer
    For i = 1 To UBound(arrBuckets) + 1
        Cells(intRow, intCol).Select
        ActiveCell.FormulaR1C1 = arrBuckets(i - 1)
        intRow = intRow + 1
    Next i
End Sub


Sub PercentRiskTableDetails(intFirstRow As Integer, intFirstTablePointer As Integer, intFirstTotal As Integer)
    Cells(intFirstRow, 3).Select
    ActiveCell.Formula = "=C" & intFirstTablePointer & "/$C$" & intFirstTotal
    
    Cells(intFirstRow, 4).Select
    ActiveCell.Formula = "=D" & intFirstTablePointer & "/$D$" & intFirstTotal
    
    Cells(intFirstRow, 5).Select
    ActiveCell.Formula = "=E" & intFirstTablePointer & "/$E$" & intFirstTotal
    
    Cells(intFirstRow, 6).Select
    ActiveCell.Formula = "=F" & intFirstTablePointer & "/$F$" & intFirstTotal
End Sub


Function FindFirstRow(intCol As Integer) As Integer
    'Range("C1").Select
    Cells(1, intCol).Select
    
    Selection.End(xlDown).Select
    'MsgBox ActiveCell.Row
    FindFirstRow = ActiveCell.Row
End Function

Function FindFirstRowReversed(intCol As Integer) As Integer
    'Range("C1").Select
    'ActiveCell.Select
    Cells(ActiveCell.Row, intCol).Select
    
    Selection.End(xlUp).Select
    'MsgBox ActiveCell.Row
    FindFirstRowReversed = ActiveCell.Row
End Function


Function FindLastRow(intCol As Integer, intRow As Integer) As Integer
'Assume that worksheet will not have more than 30000 rows
    
    'Range("C30000").Select
    Cells(intRow, intCol).Select
    Selection.End(xlUp).Select
    FindLastRow = ActiveCell.Row
End Function

Function FindLastCol(intCol As Integer, intRow As Integer) As Integer
    
    Cells(intRow, intCol).Select
    Selection.End(xlToRight).Select
    FindLastCol = ActiveCell.Column
End Function

Function FindLastColReversed(intCol As Integer, intRow As Integer) As Integer
    Cells(intRow, intCol).Select
    Selection.End(xlToLeft).Select
    FindLastColReversed = ActiveCell.Column
End Function


Function HideWorksheet(strWkSheet)
On Error GoTo ErrHandle

    Worksheets(strWkSheet).Activate
    If ActiveSheet.Visible < 0 Then
        Sheets(strWkSheet).Select
        ActiveWindow.SelectedSheets.Visible = xlSheetHidden
    End If

ErrHandle:
If Err.Number = 9 Then
    'Can't find worksheets to hide, so likely looking at wrong report book
    intGoodFile = 1
End If

End Function


Sub RemoveUnusedWorksheet()

    If intGoodFile = 1 Then
        Exit Sub
    End If

    HideWorksheet ("DurbuckRiskM_Report")
    HideWorksheet ("DurbuckCTDOVSec_Report")
    HideWorksheet ("DurbuckCTDOV_Report")
    HideWorksheet ("DurbuckCTDOVYTW_Report")
    HideWorksheet ("DurbuckCTD_Report")
    HideWorksheet ("CTDbucketCCY_Report")
    
    If intGoodFile = 1 Then
        MsgBox "Hi " & strUserName & ", this PT report does not contain the expected worksheets from the MGF_<FUNDNAME>_POINT report book"
        Exit Sub
    End If
End Sub

Sub ResetTabColour()
Dim WB As Workbook
Dim WS As Worksheet

Application.Workbooks(strPTFileName).Activate
'Set WB = ThisWorkbook
Set WB = ActiveWorkbook

For Each WS In WB.Worksheets
    With WS.Tab
        .Color = 12611584 'Blue
        .Color = xlAutomatic
        .TintAndShade = 0
    End With
Next WS

End Sub


Sub SwitchWB(strWBName As String)
Dim WB As Workbook
Dim wb2 As Workbook
Dim intWb As Integer
Dim intFileName As Integer

Set WB = ThisWorkbook
intWb = 0
intGoodFile = 0

strMacroFileName = WB.Name

If strWBName = "PortTarget" Then
    strPTFileName = ""
ElseIf strWBName = "jaci" Then
    strJaciFileName = ""
End If


intFileName = Len(strWBName)

For Each wb2 In Application.Workbooks
'Switch to workbooks with names starting with PortTarget

    'If Left(Wb2.Name, 10) = "PortTarget" Then
    If Left(wb2.Name, intFileName) = strWBName Then
        intWb = intWb + 1
        wb2.Activate
        'MsgBox Wb2.Name
        If strWBName = "PortTarget" Then
            strPTFileName = wb2.Name
        ElseIf strWBName = "jaci" Then
            strJaciFileName = wb2.Name
        End If
    End If
Next

If intWb = 0 Then
    MsgBox ("Hi " & strUserName & ", please open " & strWBName & " data file in this Excel Session too")
    intGoodFile = 1
ElseIf intWb > 1 Then
    MsgBox ("Hi " & strUserName & ", this macro can only process 1 " & strWBName & " data file at one time, please close off all other " & strWBName & " data files")
    intGoodFile = 1
End If

'Wb.Activate
End Sub


Sub SwitchWBMultiple()
Dim WB As Workbook
Dim wb2 As Workbook
Dim intWb As Integer
Dim intKey As Integer
Dim strTempFile As String
Dim strTempFund As String

Set WB = ThisWorkbook
intWb = 0
intGoodFile = 0

strMacroFileName = WB.Name
strPTFile1 = ""
strPTFile2 = ""


For Each wb2 In Application.Workbooks
'Switch to workbooks with names starting with PortTarget
'File names of both PT files collected here
'Both fund names collected here

    If Left(wb2.Name, 10) = "PortTarget" Then
        intWb = intWb + 1
        wb2.Activate
        'MsgBox Wb2.Name
        If strPTFile1 = "" Then
            strPTFile1 = wb2.Name
            Worksheets("Detail_Report").Activate
            strFund1 = Cells(FindCountryRow("Account"), 2).Value
            intKey = FindCountryRow("Cookie")
            If intGoodFile = 1 Then
                'This workbook has not been processed before
                MsgBox "Hi " & strUserName & ", " & strPTFile1 & " has not been processed before, please process it first with button 1"
                intGoodFile = 1
            End If
        Else
            strPTFile2 = wb2.Name
            Worksheets("Detail_Report").Activate
            strFund2 = Cells(FindCountryRow("Account"), 2).Value
            intKey = FindCountryRow("Cookie")
            If intGoodFile = 1 Then
                'This workbook has not been processed before
                MsgBox "Hi " & strUserName & ", " & strPTFile2 & " has not been processed before, please process it first with button 1"
                intGoodFile = 1
            End If
        End If
    End If
Next

'Request from Howe to hardcode 100501 to always be the first fund
If strFund1 <> "100501" Then
    strTempFund = strFund1
    strFund1 = strFund2
    strFund2 = strTempFund
    
    strTempFile = strPTFile1
    strPTFile1 = strPTFile2
    strPTFile2 = strTempFile
End If


If intWb = 0 Then
    MsgBox ("Hi " & strUserName & ", please open both previously processed PT data files in this Excel Session too")
    intGoodFile = 1
ElseIf intWb = 1 Then
    MsgBox ("Hi " & strUserName & ", I find only one PT data file in this Excel Session, please open the other one too")
    intGoodFile = 1
ElseIf intWb > 2 Then
    MsgBox ("Hi " & ", this macro is expecting only 2 processed PT data files at this time, please close off all other PT data files")
    intGoodFile = 1
End If


'MsgBox ("Macro File is: " & strMacroFileName & vbCrLf & "PT File 1 is: " & strPTFile1 & vbCrLf & "PT File 2 is: " & strPTFile2)


'Wb.Activate
End Sub
